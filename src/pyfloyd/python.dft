#
# Main / starting rule
#

# 'generate' is invoked to generate the file from the AST.
generate: @"
    @if[generator_options.main [main_header] [default_header]]
    @if[grammar.exception_needed 
        [vl '' '' parsing_runtime_exception_class]
        [vl]]
    @if[grammar.operators
        [vl '' '' operator_state_class]
        [vl]]


    @result_class


    @parse_function


    @parser_class[]
    @if[generator_options.main main_footer default_footer]
    "

#
# Basic block structure of the file
#

default_header: @"
    # Generated by pyfloyd version @generator_options.version
    #    https://github.com/dpranke/pyfloyd
    #    `pyfloyd @generator_options.command_line`
    @imports

    Externs = Optional[Dict[str, Any]]

    # pylint: disable=too-many-lines
    "

main_header: @'''
    #!/usr/bin/env python3
    #
    # Generated by pyfloyd version {version}
    #    https://github.com/dpranke/pyfloyd
    #    `pyfloyd @generator_options.command_line`

    @imports

    Externs = Optional[Dict[str, Any]]

    # pylint: disable=too-many-lines


    def main(
        argv=sys.argv[1:],
        stdin=sys.stdin,
        stdout=sys.stdout,
        stderr=sys.stderr,
        exists=os.path.exists,
        opener=open,
    ) -> int:
        arg_parser = argparse.ArgumentParser()
        arg_parser.add_argument('-c', '--code')
        arg_parser.add_argument(
            '-D',
            '--define',
            action='append',
            metavar='var=val',
            default=[],
            help='define an external var=value (may use multiple times)'
        )
        arg_parser.add_argument('file', nargs='?')
        args = arg_parser.parse_args(argv)

        if args.code is not None:
           msg = args.code
           path = '<code>'
        elif not args.file or args.file[1] == '-':
            path = '<stdin>'
            fp = stdin
        elif not exists(args.file):
            print('Error: file "%s" not found.' % args.file, file=stderr)
            return 1
        else:
            path = args.file
            fp = opener(path)

        externs = {}
        for d in args.define:
            k, v = d.split('=', 1)
            externs[k] = json.loads(v)

        if args.code is None:
            msg = fp.read()
        result = parse(msg, path, externs)
        if result.err:
            print(result.err, file=stderr)
            return 1
        print(json.dumps(result.val, indent=2), file=stdout)
        return 0
    '''  # main_header

imports: [vl [if generator_options.main
                 [vl 'import argparse'
                     'import json'
                     'import os'
                     'import sys']
                 [vl]]
             [if grammar.re_needed 'import re' null]
             'from typing import Any, Dict, NamedTuple, Optional'
             [if grammar.unicodedata_needed 'import unicodedata' null]]

result_class: d'''
    class Result(NamedTuple):
        """The result returned from a `parse()` call.

        If the parse is successful, `val` will contain the returned value, if any
        and `pos` will indicate the point in the text where the parser stopped.
        If the parse is unsuccessful, `err` will contain a string describing
        any errors that occurred during the parse and `pos` will indicate
        the location of the farthest error in the text.
        """

        val: Any = None
        err: Optional[str] = None
        pos: Optional[int] = None
    '''  # result_class

parsing_runtime_exception_class: d'
    class _ParsingRuntimeError(Exception):
        pass
    '

operator_state_class: d'
    class _OperatorState:
        def __init__(self):
            self.current_depth = 0
            self.current_prec = 0
            self.prec_ops = {}
            self.precs = []
            self.rassoc = set()
            self.choices = {}


    '  # operator_state_class

parse_function: d'''
    def parse(
        text: str, path: str = '<string>', externs: Externs = None
    ) -> Result:
        """Parse a given text and return the result.

        If the parse was successful, `result.val` will be the returned value
        from the parse, and `result.pos` will indicate where the parser
        stopped when it was done parsing.

        If the parse is unsuccessful, `result.err` will be a string describing
        any errors found in the text, and `result.pos` will indicate the
        furthest point reached during the parse.

        If the optional `path` is provided it will be used in any error
        messages to indicate the path to the filename containing the given
        text.
        """
        return _Parser(text, path).parse(externs)
    '''  # parse_function

parser_class: @'
    class _Parser:
        @parser_constructor[]
        @parser_methods[]
    '

default_footer: null

main_footer: d'''


    if __name__ == '__main__':
        sys.exit(main())
    '''

#
# Rules for methods in the parser class
#

# TODO: Handle self._externs properly.
parser_constructor: @'''
    def __init__(self, text, path):
        self._text = text
        self._end = len(self._text)
        self._errpos = 0
        self._failed = False
        self._path = path
        self._pos = 0
        self._val = None
        @if[[is_empty grammar.externs] [vl 'self._externs = {}'] [externs]]
        @if[generator_options.memoize 'self._cache = {}' null]
        @if[grammar.seeds_needed 'self._seeds = {}' null]
        @if[grammar.leftrec_needed 'self._blocked = set()' null]
        @if[grammar.re_needed 'self._regexps = {}' null]
        @if[grammar.lookup_needed 'self._scopes = []' null]
        @if[grammar.operator_needed
            [vl 'self._operators = {}'
                [vl_l [map_items operator_state grammar.operators]]]
            [vl]]

    '''  # parse_constructor

externs = [fn [] [vl 'self._externs = {'
                     [ind_l [map_items [fn [k v] [at_exp "    '@k': @v,"]]
                                       grammar.externs]]
                     '}']]

operator_state: [fn [rule o]
                    [vl 'o = _OperatorState()'
                        'o.prec_ops = {'
                        [operator_prec o]
                        '}'
                        'o.precs = sorted(o.prec_ops, reverse=True)'
                        [operator_rassoc o]
                        'o.choices = {'
                        [ind_l [operator_choices o]]
                        '}'
                        [at_exp "self._operators['@rule'] = o"]]]

operator_prec: [fn [o]
                   [ind_l [map [fn [prec]
                                 [hl [to_string prec]
                                     ': ['
                                     [hl_l [map [fn [op] [strcat "'" op "'"]]
                                                [getitem o.prec_ops prec]
                                                ', ']]
                                     '],']]
                             [sort [keys o.prec_ops]]]]]

operator_rassoc: [fn [o]
                     [hl 'o.rassoc = set(['
                         [comma  [map [fn [op]
                                          [strcat "'" op "'"]]
                                 o.rassoc]]
                         '])']]

operator_choices: [fn [o]
                      [map_items [fn [op meth]
                                     [at_exp "'@op': self._@meth,"]]
                                 o.choices]]

parser_methods: [fn [] [vl [parse_method]
                           [vl_l [map [fn [name]
                                          [vl ''
                                              [invoke [op_name name]]]]
                                      grammar.needed_operators]]
                           [if generator_options.memoize
                               [vl '' o_operator]
                               null]
                           [vl_l [map_items [fn [rule node]
                                                [vl ''
                                                    [rule_method rule node]]]
                                            grammar.rules]]
                           [vl_l [map [fn [name]
                                          [vl '\n'
                                              [invoke [strcat 'r_' name]]]]
                                      grammar.needed_builtin_rules]]
                           [vl_l [map [fn [name]
                                          [vl '\n'
                                              [invoke [fn_name name]]]]
                                      grammar.needed_builtin_functions]]]]

parse_method: [fn [] [if grammar.exception_needed
                         [parse_with_exception]
                         [parse_without_exception]]]

parse_with_exception: @'''
    def parse(self, externs: Externs = None):
        errors = ''
        if externs:
            for k, v in externs.items():
                if k in self._externs:
                    self._externs[k] = v
                else:
                    errors += f'Unexpected extern "{k}"\\n'
        if errors:
            return Result(None, errors, 0)
        try:
            self._r_@grammar.starting_rule()

            if self._failed:
                return Result(None, self._o_error(), self._errpos)
            return Result(self._val, None, self._pos)
        except _ParsingRuntimeError as e:  # pragma: no cover
            lineno, _ = self._o_offsets(self._errpos)
            return Result(
                None,
                self._path + ':' + str(lineno) + ' ' + str(e),
                self._errpos,
            )
    '''

parse_without_exception: @'''
    def parse(self, externs: Externs = None):
        if externs:
            for k, v in externs.items():
                self._externs[k] = v

        self._r_@grammar.starting_rule()

        if self._failed:
            return Result(None, self._o_error(), self._errpos)
        return Result(self._val, None, self._pos)
    '''

#
# Rules for each node in the AST
#

n_action: [fn [node]
              [hl [call_op 'succeed' [list [expr node.child]]] c_end]]

n_apply: [fn [node] [hl [call_rule node.rule_name [list]] c_end]]

n_choice: [fn [node] [vl 'p = self._pos'
                         [vl_l [map [fn [c] [vl [stmts c]
                                                'if not self._failed:'
                                                '    return'
                                                'self._o_rewind(p)']]
                                    [slice node.ch 0 -1]]]
                         [stmts [getitem node.ch -1]]]]

n_count: [fn [node] [vl 'vs = []'
                        'i = 0'
                        [strcat 'cmin, cmax = ' 
                                [to_string [getitem node.v 0]]
                                ', '
                                [to_string [getitem node.v 1]]]
                        'while i < cmax:'
                        [ind [stmts node.child]
                             'if self._failed:'
                             '    if i >= cmin:'
                             '        self._o_succeed(vs)'
                             '        return'
                             '    return'
                             'vs.append(self._val)'
                             'i += 1']
                        'self._o_succeed(vs)']]

n_e_arr: [fn [node] [if [is_empty node.ch]
                        '[]'
                        [tri '['
                             [comma [map [fn [c] [expr c]] node.ch]]
                             ']']]]

n_e_call: [fn [node] [tri '(' [comma [map [fn [c] [expr c]] node.ch]] ')']]

n_e_const: [fn [node] [invoke [strcat 'c_' node.v]]]

n_e_getitem: [fn [node] [tri '[' [expr node.child] ']']]

n_e_lit: [fn [node] [lit node.v]]

n_e_minus: [fn [node] [tree [expr node.left] '-' [expr node.right]]]

n_e_not: [fn [node] [tree null c_not [expr node.child]]]

n_e_num: [fn [node] node.v]

n_e_paren: [fn [node] [expr node.child]]

n_e_plus: [fn [node] [tree [expr node.left] '+' [expr node.right]]]

n_e_qual: [fn [node] [saw [map [fn [n] [invoke_node n]]
                               node.ch]]]

n_e_ident: [fn [node] [if [equal node.kind 'outer']
                          [call_op 'lookup' [list [strcat "'" node.v "'"]]]
                          [if [equal node.kind 'extern']
                              [extern node.v]
                              [if [equal node.kind 'function']
                                  [strcat 'self._' [fn_name node.v]]
                                  [varname node.v]]]]]


n_empty: [fn [node] [hl [call_op 'succeed' [list c_null]] c_end]]

n_equals: [fn [node] [hl [call_op 'str' [list [expr node.child]] c_end]]]

n_label: [fn [node] [vl [stmts node.child]
                        [if node.child.can_fail
                            [vl 'if self._failed:' '    return']
                            [vl]]
                        [if node.outer_scope
                            [vl [strcat "self._scopes[-1]['"
                                        node.name
                                        "']"
                                        ' = self._val']]
                            [vl [strcat [varname node.name]
                                        ' = self._val']]]]]

n_ends_in: [fn [node] [vl 'while True:'
                          [ind [stmts node.child]]
                          [if node.can_fail
                              [ind 'if not self._failed:'
                                   '    break']
                              [vl]]
                          [ind [call_rule 'r_any' [list]]
                               'if self._failed:'
                               '    break']]]



n_leftrec: [fn [node] [hl [call_op 'leftrec'
                                   [list [strcat 'self._' node.child.v]
                                         [strcat "'" node.v "'"]
                                         [if node.left_assoc c_true c_false]]]
                           c_end]]

n_lit: [fn [node] [hl [call_op 'str' [list [lit node.v]]] c_end]]

n_not: [fn [node] [vl 'p = self._pos'
                      'errpos = self._errpos'
                      [stmts node.child]
                      'if self._failed:'
                      '    self._o_succeed(None, p)'
                      'else:'
                      '    self._o_rewind(p)'
                      '    self._errpos = errpos'
                      '    self._o_fail()']]

n_not_one: [fn [node] [vl [n_not node]
                          'if not self._failed:'
                          [ind [call_rule 'r_any' [list]]]]]

n_operator: [fn [node] [hl [call_op 'operator'
                                    [list [strcat "'" node.v "'"]]]]]

n_opt: [fn [node] [vl 'p = self._pos'
                         [stmts node.child]
                         'if self._failed:'
                         '    self._o_succeed([], p)'
                         'else:'
                         '    self._o_succeed([self._val])']]


n_paren: [fn [node] [stmts node.child]]

n_plus: [fn [node]
            [vl 'vs = []'
                [stmts node.child]
                'if self._failed:'
                '    return'
                'vs.append(self._val)'
                'while True:'
                [ind 'p = self._pos'
                        [stmts node.child]
                        'if self._failed or self._pos == p:'
                        '    self._o_rewind(p)'
                        '    break'
                        'vs.append(self._val)']
                'self._o_succeed(vs)']]

n_pred: [fn [node]
            [vl [hl 'v = ' [expr node.child]]
                'if v is True:'
                '    self._o_succeed(v)'
                'elif v is False:'
                '    self._o_fail()'
                'else:'
                "    raise _ParsingRuntimeError('Bad predicate value')"]]

n_range: [fn [node] [hl [call_op 'range'
                                 [list [lit node.start] [lit node.stop]]]
                        c_end]]

n_regexp: [fn [node]
              [vl [hl 'p = ' [lit node.v]]
                  'if p not in self._regexps:'
                  '    self._regexps[p] = re.compile(p)'
                  'm = self._regexps[p].match(self._text, self._pos)'
                  'if m:'
                  '    self._o_succeed(m.group(0), m.end())'
                  '    return'
                  'self._o_fail()']]

n_run: [fn [node]
           [vl 'start = self._pos'
               [stmts node.child]
               [if node.child.can_fail
                   [vl 'if self._failed:'
                       '    return']
                   [vl]]
               'end = self._pos'
               'self._val = self._text[start:end]']]

n_scope: [fn [node] [vl 'self._scopes.append({})'
                        [stmts node.child]
                        'self._scopes.pop()'
                        ]]

n_set: [fn [node]
           [vl [hl 'p =' [lit [strcat '[' node.v ']']]]
               'if p not in self._regexps:'
               '    self._regexps[p] = re.compile(p)'
               'm = self._regexps[p].match(self._text, self._pos)'
               'if m:'
               '    self._o_succeed(m.group(0), m.end())'
               '    return'
               'self._o_fail()']]

n_seq: [fn [node]
           [vl [stmts [getitem node.ch 0]]
               [if [getattr [getitem node.ch 0] 'can_fail']
                   [vl 'if self._failed:'
                       '    return']
                   [vl]]
               [vl_l [map [fn [c] [vl [stmts c]
                                      [if c.can_fail
                                          [vl 'if self._failed:'
                                              '    return']
                                          [vl]]]]
                          [slice node.ch 1 -1]]]
               [stmts [getitem node.ch -1]]]]

n_star: [fn [node]
            [vl 'vs = []'
                'while True:'
                '    p = self._pos'
                [ind [stmts node.child]
                     'if self._failed or self._pos == p:'
                     '    self._o_rewind(p)'
                     '    break'
                     'vs.append(self._val)']
                'self._o_succeed(vs)']]

n_unicat: [fn [node] [hl [call_op 'unicat' [list [lit node.v]]] c_end]]

#
# Built-in operators and rules
#

o_ch: d'''
    def _o_ch(self, ch):
        p = self._pos
        if p < self._end and self._text[p] == ch:
            self._o_succeed(ch, self._pos + 1)
        else:
            self._o_fail()
    '''

o_offsets: d'''
    def _o_offsets(self, pos):
        lineno = 1
        colno = 1
        for i in range(pos):
            if self._text[i] == '\\n':
                lineno += 1
                colno = 1
            else:
                colno += 1
        return lineno, colno
    '''

o_error: d'''
    def _o_error(self):
        lineno, colno = self._o_offsets(self._errpos)
        if self._errpos == len(self._text):
            thing = 'end of input'
        else:
            thing = repr(self._text[self._errpos]).replace("'", '"')
        return '%s:%d Unexpected %s at column %d' % (
            self._path,
            lineno,
            thing,
            colno,
        )
    '''

o_fail: d'''
    def _o_fail(self):
        self._val = None
        self._failed = True
        self._errpos = max(self._errpos, self._pos)
    '''

o_leftrec: d'''
    def _o_leftrec(self, rule, rule_name, left_assoc):
        pos = self._pos
        key = (rule_name, pos)
        seed = self._seeds.get(key)
        if seed:
            self._val, self._failed, self._pos = seed
            return
        if rule_name in self._blocked:
            self._val = None
            self._failed = True
            return
        current = (None, True, self._pos)
        self._seeds[key] = current
        if left_assoc:
            self._blocked.add(rule_name)
        while True:
            rule()
            if self._pos > current[2]:
                current = (self._val, self._failed, self._pos)
                self._seeds[key] = current
                self._pos = pos
            else:
                del self._seeds[key]
                self._val, self._failed, self._pos = current
                if left_assoc:
                    self._blocked.remove(rule_name)
                return
    '''

o_lookup: d'''
    def _o_lookup(self, var):
        i = len(self._scopes) - 1
        while i >= 0:
            if var in self._scopes[i]:
                return self._scopes[i][var]
            i -= 1
        if var in self._externs:
            return self._externs[var]
        assert False, f'unknown var {var}'
    '''

o_memoize: d'''
    def _o_memoize(self, rule_name, fn):
        p = self._pos
        r = self._cache.setdefault(p, {}).get(rule_name)
        if r:
            self._val, self._failed, self._pos = r
            return
        fn()
        self._cache[p][rule_name] = (self._val, self._failed, self._pos)
    '''

o_operator: d'''
    def _o_operator(self, rule_name):
        o = self._operators[rule_name]
        pos = self._pos
        key = (rule_name, self._pos)
        seed = self._seeds.get(key)
        if seed:
            self._val, self._failed, self._pos = seed
            return
        o.current_depth += 1
        current = (None, True, self._pos)
        self._seeds[key] = current
        min_prec = o.current_prec
        i = 0
        while i < len(o.precs):
            repeat = False
            prec = o.precs[i]
            prec_ops = o.prec_ops[prec]
            if prec < min_prec:
                break
            o.current_prec = prec
            if prec_ops[0] not in o.rassoc:
                o.current_prec += 1
            for j, _ in enumerate(prec_ops):
                op = prec_ops[j]
                o.choices[op]()
                if not self._failed and self._pos > pos:
                    current = (self._val, self._failed, self._pos)
                    self._seeds[key] = current
                    repeat = True
                    break
                self._o_rewind(pos)
            if not repeat:
                i += 1

        del self._seeds[key]
        o.current_depth -= 1
        if o.current_depth == 0:
            o.current_prec = 0
        self._val, self._failed, self._pos = current
    '''

o_range: d'''
    def _o_range(self, i, j):
        p = self._pos
        if p != self._end and ord(i) <= ord(self._text[p]) <= ord(j):
            self._o_succeed(self._text[p], self._pos + 1)
        else:
            self._o_fail()
    '''

o_rewind: d'''
    def _o_rewind(self, newpos):
        self._o_succeed(None, newpos)
    '''

o_str: d'
    def _o_str(self, s):
        for ch in s:
            self._o_ch(ch)
            if self._failed:
                return
        self._val = s
    '

o_succeed: d'''
    def _o_succeed(self, v, newpos=None):
        self._val = v
        self._failed = False
        if newpos is not None:
            self._pos = newpos
    '''

o_unicat: d'''
    def _o_unicat(self, cat):
        p = self._pos
        if p < self._end and unicodedata.category(self._text[p]) == cat:
            self._o_succeed(self._text[p], self._pos + 1)
        else:
            self._o_fail()
    '''

r_any: d'''
    def _r_any(self):
        if self._pos < self._end:
            self._o_succeed(self._text[self._pos], self._pos + 1)
        else:
            self._o_fail()
    '''

r_end: d'''
    def _r_end(self):
        if self._pos == self._end:
            self._o_succeed(None)
        else:
            self._o_fail()
    '''

#
# Built-in functions
#

fn_atof: d"
    def _fn_atof(self, s):
        if '.' in s or 'e' in s or 'E' in s:
            return float(s)
        return int(s)
    "

fn_atoi: d'
    def _fn_atoi(self, a, base):
        return int(a, base)
    '

fn_atou: d'
    def _fn_atou(self, a, base):
        return chr(int(a, base))
    '

fn_cat: d'''
    def _fn_cat(self, strs):
        return ''.join(strs)
    '''

fn_concat: d'
    def _fn_concat(self, xs, ys):
        return xs + ys
    '

fn_cons: d'
    def _fn_cons(self, hd, tl):
        return [hd] + tl
    '

fn_dedent: d'
    def _fn_dedent(self, s):
        return s
    '

fn_dict: d'
    def _fn_dict(self, pairs):
        return dict(pairs)
    '

fn_itou: d'
    def _fn_itou(self, n):
        return chr(n)
    '

fn_join: d'
    def _fn_join(self, s, vs):
        return s.join(vs)
    '

fn_otou: d'
    def _fn_otou(self, s):
        return chr(int(s, base=8))
    '

fn_scat: d'
    def _fn_scat(self, hd, tl):
        return self._fn_cat(self._fn_cons(hd, tl))
    '

fn_scons: d'
    def _fn_scons(self, hd, tl):
        return [hd] + tl
    '

fn_strcat: d'
    def _fn_strcat(self, a, b):
        return a + b
    '

fn_unicode_lookup: d'
    def _fn_unicode_lookup(self, s):
        return unicodedata.lookup(s)
    '

fn_utoi: d'
    def _fn_utoi(self, s):
        return ord(s)
    '

fn_xtoi: d'
    def _fn_xtoi(self, s):
        return int(s, base=16)
    '

fn_xtou: d'
    def _fn_xtou(self, s):
        return chr(int(s, base=16))
    '

#
# various constants
#

c_true:   'True'
c_false:  'False'
c_null:   'None'
c_not:    'not '  # the not / `!` operator
c_end:    ''      # statement terminator

#
# Helper rules
#

expr:      [fn [node] [invoke [node_name node.t] node]]

stmts:     [fn [node] [invoke [node_name node.t] node]]

rule_method: [fn [rule node] [vl [strcat 'def _' rule '(self):']
                                 [ind [invoke_node node]]]]

# Invokes a template that takes a single argument, an AST node.
invoke_node: [fn [node] [invoke [node_name node.t] node]]

# Returns the method name corresponding to different kinds of functions.
node_name: [fn [name] [strcat 'n_' name]]
op_name:   [fn [name] [strcat 'o_' name]]
fn_name:   [fn [name] [strcat 'fn_' name]]
rule_name: [fn [name] name]

# Reference different kinds of variable names.
extern:    [fn [name] [strcat 'self._externs[' name ']']]
varname:   [fn [name] [strcat 'v_' [replace name '$', '_']]]

# Invoke a method on the parser object.
call:      [fn [name args] [tri [strcat 'self._' name '('] [comma args] ')']]

# Invoke specific kinds of methods on the parser object.
call_op:   [fn [name args] [call [op_name name] args]]
call_rule: [fn [name args] [call [rule_name name] args]]
