starting_template: 'generate'

indent = '    '

templates: {

generate: @'''
# Copyright 2025 Dirk Pranke. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by pyfloyd version @generator_options.version
#    https://github.com/dpranke/pyfloyd
#
@wrap_argv[]
#

from typing import Any
import unicodedata

from pyfloyd import type_desc


class UserError(Exception):
    """An exception raised from inside the host language (in user code)."""


class HostError(Exception):
    """An exception raised by the host environment internally."""


@vl[[map_items [fn [k v] [func k v]] functions]]
@all[]


UNDEFINED = (
@ind[[map_items [fn [k v] [if [has v 'body']
                              null
                              [strcat "'" k "',"]]] functions]]
)
'''

wrap_argv: [fn [] [wrap [hang [cons 'pyfloyd' generator_options.argv] ' ']
                        '#     ' ' \\' '#    `' '`']]

t_type_str: [fn [ts] [t_td_str [str2td ts]]]

t_td_str: [fn [td]
              [let [[b  [item td 'base']]
                    [els [item td 'elements']]
                    [b2s [cond [[equal b 'null'] 'None']
                                [[equal b 'any'] 'Any']
                                 [else b]]]]
                [if [is_empty els]
                    b2s
                    [strcat b2s
                            '['
                            [join ', ' [map t_td_str els]]
                            ']']]]]

func: [fn [k v] [if [has v 'body']
                    [vl [hl 'def f_'
                            k
                            '('
                            [params v.params]
                            ') -> '
                            [t_type_str v.ret]
                            ':']
                        [ind # [hl '"""' [substr v.doc 0 -1] '"""']
                             # ''
                             v.body
                             ''
                             '']]
                    null]]

params: [fn [params]
            [hl [map [fn [param]
                         [if [equal [len param] 3]
                             [strcat [item param 0]
                                     ': '
                                     [t_type_str [item param 1]]
                                     ' = '
                                     [if [is_str [item param 2]]
                                         [strcat "'" [item param 2] "'"]
                                         [itoa [item param 2]]]]
                             [strcat [item param 0]
                                     ': '
                                     [t_type_str [item param 1]]]]]
                     params ', ']]]

all = [fn []
          [vl 'ALL: dict[str, dict[str, Any]] = {'
              [ind [map_items [fn [k v] [vl [hl "'" k "': {"]
                                            [fn_def k v],
                                            '},']]
                              functions]]
              '}']]

fn_def = [fn [k v]
             [ind [hl "'func': "
                      [if [has v 'body'] [strcat 'f_' k] 'None'] ',']
                  [hl "'params': " [param_types v.params] ',']
                  [hl "'ret': '" v.ret "',"]]]

param_types: [fn [params]
                 [hl '[' [map [fn [param]
                                  [hl "['"
                                      [item param 0]
                                      "', '"
                                      [item param 1]
                                      "']"]]
                              params
                              ', '] ']']]

}
