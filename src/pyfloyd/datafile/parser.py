# Generated by pyfloyd version 0.28.0.dev0
#    https://github.com/dpranke/pyfloyd
#    `pyfloyd -g python -o src/pyfloyd/datafile/parser.py grammars/datafile.g`

import re
from typing import Any, Dict, NamedTuple, Optional


Externs = Optional[Dict[str, Any]]

# pylint: disable=too-many-lines


class _ParsingRuntimeError(Exception):
    pass


class Result(NamedTuple):
    """The result returned from a `parse()` call.

    If the parse is successful, `val` will contain the returned value, if any
    and `pos` will indicate the point in the text where the parser stopped.
    If the parse is unsuccessful, `err` will contain a string describing
    any errors that occurred during the parse and `pos` will indicate
    the location of the farthest error in the text.
    """

    val: Any = None
    err: Optional[str] = None
    pos: Optional[int] = None


def parse(
    text: str, path: str = '<string>', externs: Externs = None, start: int = 0
) -> Result:
    """Parse a given text and return the result.

    If the parse was successful, `result.val` will be the returned value
    from the parse, and `result.pos` will indicate where the parser
    stopped when it was done parsing.

    If the parse is unsuccessful, `result.err` will be a string describing
    any errors found in the text, and `result.pos` will indicate the
    furthest point reached during the parse.

    If the optional `path` is provided it will be used in any error
    messages to indicate the path to the filename containing the given
    text.
    """
    return _Parser(text, path).parse(externs, start)


class _Parser:
    def __init__(self, text, path):
        self._text = text
        self._end = len(self._text)
        self._errpos = 0
        self._failed = False
        self._path = path
        self._pos = 0
        self._val = None
        self._externs = {
            'memoize': True,
            'allow_trailing': False,
            'allow_numwords': False,
            'unicode': True,
            'unicode_names': True,
        }
        self._cache = {}
        self._regexps = {}
        self._scopes = []

    def parse(self, externs: Externs = None, start: int = 0):
        self._pos = start

        errors = ''
        if externs:
            for k, v in externs.items():
                if k in self._externs:
                    self._externs[k] = v
                else:
                    errors += f'Unexpected extern "{k}"\n'
        for k, v in self._externs.items():
            if v is None:
                errors += f'Missing required extern "{k}"\n'

        if errors:
            return Result(None, errors, 0)
        try:
            self._r_grammar()

            if self._failed:
                return Result(None, self._o_error(), self._errpos)
            return Result(self._val, None, self._pos)
        except _ParsingRuntimeError as e:  # pragma: no cover
            lineno, _ = self._o_offsets(self._errpos)
            return Result(
                None,
                self._path + ':' + str(lineno) + ' ' + str(e),
                self._errpos,
            )

    def _r_grammar(self):
        p = self._pos
        self._s_grammar_1()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_grammar_3()

    def _s_grammar_1(self):
        self._s_grammar_2()
        if self._failed:
            return
        v__1 = self._val
        if self._failed:
            return
        self._o_memoize('r__filler', self._r__filler)
        self._o_memoize('r_trailing', self._r_trailing)
        if self._failed:
            return
        self._o_succeed(['object', '', v__1])

    def _s_grammar_2(self):
        vs = []
        self._o_memoize('r_member', self._r_member)
        if self._failed:
            return
        vs.append(self._val)
        while True:
            p = self._pos
            self._o_memoize('r_member', self._r_member)
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _s_grammar_3(self):
        self._o_memoize('r_value', self._r_value)
        if self._failed:
            return
        v__1 = self._val
        if self._failed:
            return
        self._o_memoize('r__filler', self._r__filler)
        self._o_memoize('r_trailing', self._r_trailing)
        if self._failed:
            return
        self._o_succeed(v__1)

    def _r_nofiller(self):
        p = self._pos
        errpos = self._errpos
        self._s_nofiller_1()
        if self._failed:
            self._o_succeed(None, p)
        else:
            self._o_rewind(p)
            self._errpos = errpos
            self._o_fail()

    def _s_nofiller_1(self):
        p = self._pos
        self._o_memoize('r__whitespace', self._r__whitespace)
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_memoize('r__comment', self._r__comment)

    def _r_trailing(self):
        p = self._pos
        self._s_trailing_1()
        if not self._failed:
            return
        self._o_rewind(p)
        v = self._externs['allow_trailing']
        if v is True:
            self._o_succeed(v)
        elif v is False:
            self._o_fail()
        else:
            raise _ParsingRuntimeError('Bad predicate value')

    def _s_trailing_1(self):
        v = not self._externs['allow_trailing']
        if v is True:
            self._o_succeed(v)
        elif v is False:
            self._o_fail()
        else:
            raise _ParsingRuntimeError('Bad predicate value')
        if self._failed:
            return
        self._o_memoize('r__filler', self._r__filler)
        self._o_memoize('r_end', self._r_end)

    def _r_eol(self):
        p = self._pos
        self._s_eol_1()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_eol_2()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_eol_3()

    def _s_eol_1(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_str('\r\n')

    def _s_eol_2(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch('\r')

    def _s_eol_3(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch('\n')

    def _r_value(self):
        p = self._pos
        self._s_value_1()
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_memoize('r_object', self._r_object)
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_memoize('r_array', self._r_array)
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_value_3()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_value_4()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_value_5()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_value_6()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_value_8()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_value_10()

    def _s_value_1(self):
        self._s_value_2()
        if self._failed:
            return
        v__1 = self._val
        if self._failed:
            return
        self._o_succeed(['string', v__1, []])

    def _s_value_2(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_memoize('r_string', self._r_string)

    def _s_value_3(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_str('true')
        if self._failed:
            return
        self._o_succeed(['true', True, []])

    def _s_value_4(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_str('false')
        if self._failed:
            return
        self._o_succeed(['false', False, []])

    def _s_value_5(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_str('null')
        if self._failed:
            return
        self._o_succeed(['null', None, []])

    def _s_value_6(self):
        v = self._externs['allow_numwords']
        if v is True:
            self._o_succeed(v)
        elif v is False:
            self._o_fail()
        else:
            raise _ParsingRuntimeError('Bad predicate value')
        if self._failed:
            return
        self._s_value_7()
        if self._failed:
            return
        v__2 = self._val
        if self._failed:
            return
        self._o_succeed(['numword', v__2, []])

    def _s_value_7(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_memoize('r_numword', self._r_numword)

    def _s_value_8(self):
        self._s_value_9()
        if self._failed:
            return
        v__1 = self._val
        if self._failed:
            return
        self._o_succeed(['number', v__1, []])

    def _s_value_9(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_memoize('r_number', self._r_number)

    def _s_value_10(self):
        self._s_value_11()
        if self._failed:
            return
        v__1 = self._val
        if self._failed:
            return
        self._o_succeed(['bareword', v__1, []])

    def _s_value_11(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_memoize('r_bareword', self._r_bareword)

    def _r_string(self):
        self._scopes.append({})
        self._s_string_1()
        self._scopes.pop()

    def _s_string_1(self):
        self._o_memoize('r_string_tag', self._r_string_tag)
        v__1 = self._val
        self._o_memoize('r_nofiller', self._r_nofiller)
        if self._failed:
            return
        self._o_memoize('r_quote', self._r_quote)
        if self._failed:
            return
        self._scopes[-1]['q'] = self._val
        if self._failed:
            return
        self._s_string_2()
        v__4 = self._val
        self._s_string_3()
        v__5 = self._val
        self._o_str(self._o_lookup('q'))
        if self._failed:
            return
        self._o_succeed([v__1, self._o_lookup('q'), v__4, v__5])

    def _s_string_2(self):
        self._o_succeed(self._fn_colno())

    def _s_string_3(self):
        start = self._pos
        self._s_string_4()
        end = self._pos
        self._val = self._text[start:end]

    def _s_string_4(self):
        vs = []
        while True:
            p = self._pos
            self._s_string_5()
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _s_string_5(self):
        p = self._pos
        self._s_string_6()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_string_7()

    def _s_string_6(self):
        self._o_ch('\\')
        if self._failed:
            return
        self._o_memoize('r_any', self._r_any)

    def _s_string_7(self):
        self._s_string_8()
        if self._failed:
            return
        self._o_memoize('r_any', self._r_any)

    def _s_string_8(self):
        p = self._pos
        errpos = self._errpos
        self._s_string_9()
        if self._failed:
            self._o_succeed(None, p)
        else:
            self._o_rewind(p)
            self._errpos = errpos
            self._o_fail()

    def _s_string_9(self):
        self._o_str(self._o_lookup('q'))

    def _r_string_tag(self):
        p = self._pos
        self._o_ch('r')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_ch('i')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_str('ri')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_str('ir')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_ch('x')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_str('b64')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_memoize('r_tag', self._r_tag)

    def _r_tag(self):
        p = self._pos
        self._o_memoize('r_bareword', self._r_bareword)
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_tag_1()

    def _s_tag_1(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_succeed('')

    def _r_quote(self):
        p = self._pos
        self._o_str("'''")
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_ch("'")
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_str('"""')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_ch('"')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_str('```')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_ch('`')
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_quote_1()

    def _s_quote_1(self):
        self._o_ch('L')
        if self._failed:
            return
        self._s_quote_2()
        if self._failed:
            return
        v__2 = self._val
        if self._failed:
            return
        self._o_succeed(v__2)

    def _s_quote_2(self):
        start = self._pos
        self._s_quote_3()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_quote_3(self):
        self._o_ch("'")
        if self._failed:
            return
        self._s_quote_4()
        if self._failed:
            return
        self._o_ch("'")

    def _s_quote_4(self):
        vs = []
        self._o_ch('=')
        if self._failed:
            return
        vs.append(self._val)
        while True:
            p = self._pos
            self._o_ch('=')
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _r_numword(self):
        start = self._pos
        self._s_numword_1()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_numword_1(self):
        self._o_memoize('r_number', self._r_number)
        if self._failed:
            return
        self._s_numword_2()

    def _s_numword_2(self):
        vs = []
        self._s_numword_3()
        if self._failed:
            return
        vs.append(self._val)
        while True:
            p = self._pos
            self._s_numword_3()
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _s_numword_3(self):
        p = self._pos
        errpos = self._errpos
        self._s_numword_4()
        if self._failed:
            self._o_succeed(None, p)
        else:
            self._o_rewind(p)
            self._errpos = errpos
            self._o_fail()
        if not self._failed:
            self._r_any()

    def _s_numword_4(self):
        p = self._pos
        self._o_memoize('r_punct', self._r_punct)
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_memoize('r__whitespace', self._r__whitespace)

    def _r_number(self):
        p = self._pos
        self._s_number_1()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_number_6()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_number_11()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_number_16()

    def _s_number_1(self):
        start = self._pos
        self._s_number_2()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_number_2(self):
        self._o_str('0b')
        if self._failed:
            return
        self._o_memoize('r_bin', self._r_bin)
        if self._failed:
            return
        self._s_number_3()

    def _s_number_3(self):
        vs = []
        while True:
            p = self._pos
            self._s_number_4()
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _s_number_4(self):
        p = self._pos
        self._s_number_5()
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_memoize('r_bin', self._r_bin)

    def _s_number_5(self):
        self._o_ch('_')
        if self._failed:
            return
        self._o_memoize('r_bin', self._r_bin)

    def _s_number_6(self):
        start = self._pos
        self._s_number_7()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_number_7(self):
        self._o_str('0o')
        if self._failed:
            return
        self._o_memoize('r_oct', self._r_oct)
        if self._failed:
            return
        self._s_number_8()

    def _s_number_8(self):
        vs = []
        while True:
            p = self._pos
            self._s_number_9()
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _s_number_9(self):
        p = self._pos
        self._s_number_10()
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_memoize('r_oct', self._r_oct)

    def _s_number_10(self):
        self._o_ch('_')
        if self._failed:
            return
        self._o_memoize('r_oct', self._r_oct)

    def _s_number_11(self):
        start = self._pos
        self._s_number_12()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_number_12(self):
        self._o_str('0x')
        if self._failed:
            return
        self._o_memoize('r_hex', self._r_hex)
        if self._failed:
            return
        self._s_number_13()

    def _s_number_13(self):
        vs = []
        while True:
            p = self._pos
            self._s_number_14()
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _s_number_14(self):
        p = self._pos
        self._s_number_15()
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_memoize('r_hex', self._r_hex)

    def _s_number_15(self):
        self._o_ch('_')
        if self._failed:
            return
        self._o_memoize('r_hex', self._r_hex)

    def _s_number_16(self):
        start = self._pos
        self._s_number_17()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_number_17(self):
        self._s_number_18()
        self._o_memoize('r_int', self._r_int)
        if self._failed:
            return
        self._s_number_20()
        self._s_number_21()

    def _s_number_18(self):
        p = self._pos
        self._s_number_19()
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _s_number_19(self):
        p = self._pos
        self._o_ch('-')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_ch('+')

    def _s_number_20(self):
        p = self._pos
        self._o_memoize('r_frac', self._r_frac)
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _s_number_21(self):
        p = self._pos
        self._o_memoize('r_exp', self._r_exp)
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _r_bareword(self):
        self._s_bareword_1()
        if self._failed:
            return
        self._s_bareword_3()

    def _s_bareword_1(self):
        p = self._pos
        errpos = self._errpos
        self._s_bareword_2()
        if self._failed:
            self._o_succeed(None, p)
        else:
            self._o_rewind(p)
            self._errpos = errpos
            self._o_fail()

    def _s_bareword_2(self):
        p = self._pos
        self._o_str('true')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_str('false')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_str('null')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_memoize('r_number', self._r_number)

    def _s_bareword_3(self):
        start = self._pos
        self._s_bareword_4()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_bareword_4(self):
        vs = []
        self._s_bareword_5()
        if self._failed:
            return
        vs.append(self._val)
        while True:
            p = self._pos
            self._s_bareword_5()
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _s_bareword_5(self):
        p = self._pos
        errpos = self._errpos
        self._s_bareword_6()
        if self._failed:
            self._o_succeed(None, p)
        else:
            self._o_rewind(p)
            self._errpos = errpos
            self._o_fail()
        if not self._failed:
            self._r_any()

    def _s_bareword_6(self):
        p = self._pos
        self._o_memoize('r_punct', self._r_punct)
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_memoize('r__whitespace', self._r__whitespace)

    def _r_punct(self):
        p = "(L'=+')|[\\/#'\"`\\[\\](){}:=,]"
        if p not in self._regexps:
            self._regexps[p] = re.compile(p)
        m = self._regexps[p].match(self._text, self._pos)
        if m:
            self._o_succeed(m.group(0), m.end())
            return
        self._o_fail()

    def _r_int(self):
        p = self._pos
        self._o_ch('0')
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_int_1()

    def _s_int_1(self):
        self._o_memoize('r_nonzerodigit', self._r_nonzerodigit)
        if self._failed:
            return
        self._o_memoize('r_digit_sep', self._r_digit_sep)

    def _r_digit_sep(self):
        vs = []
        while True:
            p = self._pos
            self._s_digit_sep_1()
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _s_digit_sep_1(self):
        p = self._pos
        self._s_digit_sep_2()
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_memoize('r_digit', self._r_digit)

    def _s_digit_sep_2(self):
        self._o_ch('_')
        if self._failed:
            return
        self._o_memoize('r_digit', self._r_digit)

    def _r_digit(self):
        p = '[0-9]'
        if p not in self._regexps:
            self._regexps[p] = re.compile(p)
        m = self._regexps[p].match(self._text, self._pos)
        if m:
            self._o_succeed(m.group(0), m.end())
            return
        self._o_fail()

    def _r_nonzerodigit(self):
        p = '[1-9]'
        if p not in self._regexps:
            self._regexps[p] = re.compile(p)
        m = self._regexps[p].match(self._text, self._pos)
        if m:
            self._o_succeed(m.group(0), m.end())
            return
        self._o_fail()

    def _r_frac(self):
        self._o_ch('.')
        if self._failed:
            return
        self._s_frac_1()
        self._o_memoize('r_digit_sep', self._r_digit_sep)

    def _s_frac_1(self):
        p = self._pos
        self._o_memoize('r_digit', self._r_digit)
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _r_exp(self):
        self._s_exp_1()
        if self._failed:
            return
        self._s_exp_2()
        self._s_exp_4()
        self._o_memoize('r_digit_sep', self._r_digit_sep)

    def _s_exp_1(self):
        p = self._pos
        self._o_ch('e')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_ch('E')

    def _s_exp_2(self):
        p = self._pos
        self._s_exp_3()
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _s_exp_3(self):
        p = self._pos
        self._o_ch('+')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_ch('-')

    def _s_exp_4(self):
        p = self._pos
        self._o_memoize('r_digit', self._r_digit)
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _r_bin(self):
        p = '[01]'
        if p not in self._regexps:
            self._regexps[p] = re.compile(p)
        m = self._regexps[p].match(self._text, self._pos)
        if m:
            self._o_succeed(m.group(0), m.end())
            return
        self._o_fail()

    def _r_oct(self):
        p = '[0-7]'
        if p not in self._regexps:
            self._regexps[p] = re.compile(p)
        m = self._regexps[p].match(self._text, self._pos)
        if m:
            self._o_succeed(m.group(0), m.end())
            return
        self._o_fail()

    def _r_hex(self):
        p = '[0-9a-fA-F]'
        if p not in self._regexps:
            self._regexps[p] = re.compile(p)
        m = self._regexps[p].match(self._text, self._pos)
        if m:
            self._o_succeed(m.group(0), m.end())
            return
        self._o_fail()

    def _r_bchar(self):
        p = self._pos
        self._s_bchar_1()
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_memoize('r_any', self._r_any)

    def _s_bchar_1(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch('\\')
        if self._failed:
            return
        self._o_memoize('r_escape', self._r_escape)

    def _r_escape(self):
        p = self._pos
        self._s_escape_1()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_escape_3()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_escape_4()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_escape_6()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_escape_8()

    def _s_escape_1(self):
        self._o_memoize('r__filler', self._r__filler)
        self._s_escape_2()

    def _s_escape_2(self):
        p = '[\\abfnrtv\'"`]'
        if p not in self._regexps:
            self._regexps[p] = re.compile(p)
        m = self._regexps[p].match(self._text, self._pos)
        if m:
            self._o_succeed(m.group(0), m.end())
            return
        self._o_fail()

    def _s_escape_3(self):
        vs = []
        i = 0
        cmin, cmax = [1, 3]
        while i < cmax:
            self._o_memoize('r_oct', self._r_oct)
            if self._failed:
                if i >= cmin:
                    self._o_succeed(vs)
                    return
                return
            vs.append(self._val)
            i += 1
        self._o_succeed(vs)

    def _s_escape_4(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch('x')
        if self._failed:
            return
        self._s_escape_5()

    def _s_escape_5(self):
        vs = []
        i = 0
        cmin, cmax = [1, 2]
        while i < cmax:
            self._o_memoize('r_hex', self._r_hex)
            if self._failed:
                if i >= cmin:
                    self._o_succeed(vs)
                    return
                return
            vs.append(self._val)
            i += 1
        self._o_succeed(vs)

    def _s_escape_6(self):
        v = self._externs['unicode']
        if v is True:
            self._o_succeed(v)
        elif v is False:
            self._o_fail()
        else:
            raise _ParsingRuntimeError('Bad predicate value')
        if self._failed:
            return
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch('u')
        if self._failed:
            return
        self._s_escape_7()

    def _s_escape_7(self):
        vs = []
        i = 0
        cmin, cmax = [1, 8]
        while i < cmax:
            self._o_memoize('r_hex', self._r_hex)
            if self._failed:
                if i >= cmin:
                    self._o_succeed(vs)
                    return
                return
            vs.append(self._val)
            i += 1
        self._o_succeed(vs)

    def _s_escape_8(self):
        v = self._externs['unicode_names']
        if v is True:
            self._o_succeed(v)
        elif v is False:
            self._o_fail()
        else:
            raise _ParsingRuntimeError('Bad predicate value')
        if self._failed:
            return
        self._o_memoize('r__filler', self._r__filler)
        self._o_str('N{')
        if self._failed:
            return
        self._o_memoize('r_unicode_name', self._r_unicode_name)
        if self._failed:
            return
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch('}')

    def _r_unicode_name(self):
        self._o_memoize('r__filler', self._r__filler)
        self._s_unicode_name_1()

    def _s_unicode_name_1(self):
        p = '[A-Z][A-Z0-9]*([ -][A-Z][A-Z0-9]*)*'
        if p not in self._regexps:
            self._regexps[p] = re.compile(p)
        m = self._regexps[p].match(self._text, self._pos)
        if m:
            self._o_succeed(m.group(0), m.end())
            return
        self._o_fail()

    def _r_array(self):
        p = self._pos
        self._s_array_1()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_array_9()

    def _s_array_1(self):
        self._o_memoize('r_array_tag', self._r_array_tag)
        v__1 = self._val
        self._o_memoize('r_nofiller', self._r_nofiller)
        if self._failed:
            return
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch('[')
        if self._failed:
            return
        self._s_array_2()
        v__4 = self._val
        self._s_array_3()
        v__5 = self._val
        self._s_array_7()
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch(']')
        if self._failed:
            return
        self._o_succeed(['array', v__1, self._fn_concat(v__4, v__5)])

    def _s_array_2(self):
        p = self._pos
        self._o_memoize('r_value', self._r_value)
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _s_array_3(self):
        vs = []
        while True:
            p = self._pos
            self._s_array_4()
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _s_array_4(self):
        self._s_array_5()
        self._o_memoize('r_value', self._r_value)

    def _s_array_5(self):
        p = self._pos
        self._s_array_6()
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _s_array_6(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch(',')

    def _s_array_7(self):
        p = self._pos
        self._s_array_8()
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _s_array_8(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch(',')

    def _s_array_9(self):
        self._o_memoize('r_array_tag', self._r_array_tag)
        v__1 = self._val
        self._o_memoize('r_nofiller', self._r_nofiller)
        if self._failed:
            return
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch('(')
        if self._failed:
            return
        self._s_array_10()
        v__4 = self._val
        self._s_array_11()
        v__5 = self._val
        self._s_array_15()
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch(')')
        if self._failed:
            return
        self._o_succeed(['array', v__1, self._fn_concat(v__4, v__5)])

    def _s_array_10(self):
        p = self._pos
        self._o_memoize('r_value', self._r_value)
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _s_array_11(self):
        vs = []
        while True:
            p = self._pos
            self._s_array_12()
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _s_array_12(self):
        self._s_array_13()
        self._o_memoize('r_value', self._r_value)

    def _s_array_13(self):
        p = self._pos
        self._s_array_14()
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _s_array_14(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch(',')

    def _s_array_15(self):
        p = self._pos
        self._s_array_16()
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _s_array_16(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch(',')

    def _r_array_tag(self):
        p = self._pos
        self._s_array_tag_1()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_array_tag_2()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_array_tag_3()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_array_tag_4()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_array_tag_5()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_array_tag_6()
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_memoize('r_tag', self._r_tag)

    def _s_array_tag_1(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch('s')

    def _s_array_tag_2(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch('b')

    def _s_array_tag_3(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch('q')

    def _s_array_tag_4(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_str('qq')

    def _s_array_tag_5(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_str('uq')

    def _s_array_tag_6(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_str('us')

    def _r_object(self):
        self._o_memoize('r_object_tag', self._r_object_tag)
        v__1 = self._val
        self._o_memoize('r_nofiller', self._r_nofiller)
        if self._failed:
            return
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch('{')
        if self._failed:
            return
        self._s_object_1()
        v__4 = self._val
        self._s_object_2()
        v__5 = self._val
        self._s_object_6()
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch('}')
        if self._failed:
            return
        self._o_succeed(['object', v__1, self._fn_concat(v__4, v__5)])

    def _s_object_1(self):
        p = self._pos
        self._o_memoize('r_member', self._r_member)
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _s_object_2(self):
        vs = []
        while True:
            p = self._pos
            self._s_object_3()
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _s_object_3(self):
        self._s_object_4()
        self._o_memoize('r_member', self._r_member)

    def _s_object_4(self):
        p = self._pos
        self._s_object_5()
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _s_object_5(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch(',')

    def _s_object_6(self):
        p = self._pos
        self._s_object_7()
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _s_object_7(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch(',')

    def _r_object_tag(self):
        self._o_memoize('r_tag', self._r_tag)

    def _r_member(self):
        self._o_memoize('r_key', self._r_key)
        if self._failed:
            return
        v__1 = self._val
        if self._failed:
            return
        self._s_member_1()
        if self._failed:
            return
        self._o_memoize('r_value', self._r_value)
        if self._failed:
            return
        v__3 = self._val
        if self._failed:
            return
        self._o_succeed([v__1, v__3])

    def _s_member_1(self):
        p = self._pos
        self._s_member_2()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_member_3()

    def _s_member_2(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch(':')

    def _s_member_3(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_ch('=')

    def _r_key(self):
        p = self._pos
        self._s_key_1()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_key_3()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s_key_5()

    def _s_key_1(self):
        self._s_key_2()
        if self._failed:
            return
        v__1 = self._val
        if self._failed:
            return
        self._o_succeed(['string', v__1, []])

    def _s_key_2(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_memoize('r_string', self._r_string)

    def _s_key_3(self):
        self._s_key_4()
        if self._failed:
            return
        v__1 = self._val
        if self._failed:
            return
        self._o_succeed(['bareword', v__1, []])

    def _s_key_4(self):
        self._o_memoize('r__filler', self._r__filler)
        self._o_memoize('r_bareword', self._r_bareword)

    def _s_key_5(self):
        v = self._externs['allow_numwords']
        if v is True:
            self._o_succeed(v)
        elif v is False:
            self._o_fail()
        else:
            raise _ParsingRuntimeError('Bad predicate value')
        if self._failed:
            return
        v__1 = self._val
        if self._failed:
            return
        self._o_memoize('r__filler', self._r__filler)
        self._o_memoize('r_numword', self._r_numword)
        if self._failed:
            return
        self._o_succeed(['numword', v__1, []])

    def _r__whitespace(self):
        vs = []
        self._s__whitespace_1()
        if self._failed:
            return
        vs.append(self._val)
        while True:
            p = self._pos
            self._s__whitespace_1()
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _s__whitespace_1(self):
        p = '[ \n\r\t]'
        if p not in self._regexps:
            self._regexps[p] = re.compile(p)
        m = self._regexps[p].match(self._text, self._pos)
        if m:
            self._o_succeed(m.group(0), m.end())
            return
        self._o_fail()

    def _r__comment(self):
        p = self._pos
        self._s__comment_1()
        if not self._failed:
            return
        self._o_rewind(p)
        self._s__comment_9()

    def _s__comment_1(self):
        start = self._pos
        self._s__comment_2()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s__comment_2(self):
        self._s__comment_3()
        if self._failed:
            return
        self._s__comment_4()
        self._s__comment_6()

    def _s__comment_3(self):
        p = self._pos
        self._o_ch('#')
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_str('//')

    def _s__comment_4(self):
        vs = []
        while True:
            p = self._pos
            self._s__comment_5()
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _s__comment_5(self):
        p = '[^\r\n]'
        if p not in self._regexps:
            self._regexps[p] = re.compile(p)
        m = self._regexps[p].match(self._text, self._pos)
        if m:
            self._o_succeed(m.group(0), m.end())
            return
        self._o_fail()

    def _s__comment_6(self):
        p = self._pos
        self._o_memoize('r_end', self._r_end)
        if not self._failed:
            return
        self._o_rewind(p)
        self._s__comment_7()
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_ch('\n')

    def _s__comment_7(self):
        self._o_ch('\r')
        if self._failed:
            return
        self._s__comment_8()

    def _s__comment_8(self):
        p = self._pos
        self._o_ch('\n')
        if self._failed:
            self._o_succeed([], p)
        else:
            self._o_succeed([self._val])

    def _s__comment_9(self):
        start = self._pos
        self._s__comment_10()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s__comment_10(self):
        self._o_str('/*')
        if self._failed:
            return
        while True:
            self._o_str('*/')
            if not self._failed:
                break
            self._r_any()
            if self._failed:
                break

    def _r__filler(self):
        start = self._pos
        self._s__filler_1()
        end = self._pos
        self._val = self._text[start:end]

    def _s__filler_1(self):
        vs = []
        while True:
            p = self._pos
            self._s__filler_2()
            if self._failed or self._pos == p:
                self._o_rewind(p)
                break
            vs.append(self._val)
        self._o_succeed(vs)

    def _s__filler_2(self):
        p = self._pos
        self._o_memoize('r__whitespace', self._r__whitespace)
        if not self._failed:
            return
        self._o_rewind(p)
        self._o_memoize('r__comment', self._r__comment)

    def _r_any(self):
        if self._pos < self._end:
            self._o_succeed(self._text[self._pos], self._pos + 1)
        else:
            self._o_fail()

    def _r_end(self):
        if self._pos == self._end:
            self._o_succeed(None)
        else:
            self._o_fail()

    def _o_ch(self, ch):
        p = self._pos
        if p < self._end and self._text[p] == ch:
            self._o_succeed(ch, self._pos + 1)
        else:
            self._o_fail()

    def _o_error(self):
        lineno, colno = self._o_offsets(self._errpos)
        if self._errpos == len(self._text):
            thing = 'end of input'
        else:
            thing = repr(self._text[self._errpos]).replace("'", '"')
        path = self._path
        return f'{path}:{lineno} Unexpected {thing} at column {colno}'

    def _o_fail(self):
        self._val = None
        self._failed = True
        self._errpos = max(self._errpos, self._pos)

    def _o_lookup(self, var):
        i = len(self._scopes) - 1
        while i >= 0:
            if var in self._scopes[i]:
                return self._scopes[i][var]
            i -= 1
        if var in self._externs:
            return self._externs[var]
        assert False, f'unknown var {var}'

    def _o_memoize(self, rule_name, fn):
        p = self._pos
        r = self._cache.setdefault(p, {}).get(rule_name)
        if r:
            self._val, self._failed, self._pos = r
            return
        fn()
        self._cache[p][rule_name] = (self._val, self._failed, self._pos)

    def _o_offsets(self, pos):
        lineno = 1
        colno = 1
        for i in range(pos):
            if self._text[i] == '\n':
                lineno += 1
                colno = 1
            else:
                colno += 1
        return lineno, colno

    def _o_rewind(self, newpos):
        self._o_succeed(None, newpos)

    def _o_str(self, s):
        for ch in s:
            self._o_ch(ch)
            if self._failed:
                return
        self._val = s

    def _o_succeed(self, v, newpos=None):
        self._val = v
        self._failed = False
        if newpos is not None:
            self._pos = newpos

    def _fn_colno(self):
        colno = 0
        if self._pos == self._end:
            colno += 1
        while self._pos >= colno and self._text[self._pos - colno] != '\n':
            colno += 1
        return colno

    def _fn_concat(self, xs, ys):
        return xs + ys
