# Copyright 2025 Dirk Pranke. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file contains the code generation templates for JavaScript.
# It depends on a base set of templates used by fairly similar languages.

name = 'Go'
ext = '.go'
indent = 4
line_length = 79

starting_template: 'generate'

inherit: ['base']

declare_local_vars = true

local_var_map = {
    choice: ['pos int']
    count: ['cmin int' 'cmax int' 'i int' 'vs list[any]']
    not: ['errpos int' 'pos int']
    not_one: ['errpos int' 'pos int']
    plus: ['pos int' 'vs list[any]']
    pred: ['v any']
    run: ['end int' 'start int']
    star: ['pos int' 'vs list[any]']
}


templates = {

#
# Helper rules
#

block: [fn [head body] [vl [hl head ' {'] [ind body] '}']]

#
# How to refer to different types of identifiers:
#

# Returns a field or method on the generated parse object.
fld: [fn [name] [strcat 'p.' name]]

f_pos: [fld 'pos']
f_errpos: [fld 'errpos']
f_val: [fld 'val']
failed: [fld 'failed']

extern: [fn [name] [strcat "p.externs[" [lit name] "]"]]

method_name: [fn [name] [fld name]]

lit: [fn [s]
         [if [is_str s]
             [strcat '"' [escape s '"'] '"']
             [if [is_int s] [itoa s] [if [is_bool s] [btoa s] '<unknown?>']]]]

#
# Helper methods for generating text portably.
#

t_assign: [fn [var val] [hl var ' = ' val t_end]]
t_assign_outer: [fn [var val]
                    [hl 'p.scopes[len(p.scopes) - 1]["' var '"] = ' val]]
t_append: [fn [lst val] [hl lst ' = append(' lst ', ' val ')' t_end]]
t_break:  'break'

t_declare_local_vars: [fn [node] [t_declare_vars node.attrs.local_vars]]

t_declare_vars: [fn [vars]
                    [vl [map_items [fn [name td]
                                       [hl 'var ' name ' ' [t_type_str td]]]
                                   vars]]]

# Note that we can't use proper types here because Go considers
# `list[T]` and `list[any]` as two different things and you can't cast
# from one to the other. Once you can't use `list[T]` for local vars,
# you might as well not use `T` either, and just always deal in `any`,
# because otherwise you're casting between T and any a lot.
t_declare_node_vars: [
    fn [node] [t_declare_vars [dict [map_items [fn [v ty]
                                                   [list [local_var v]
                                                         [str2td 'any']]]
                                               node.attrs.vars]]]]

t_empty_any_list: '[]any{}'
t_empty_str_list: '[]str{}'

t_end: ''  # statement terminator
t_eq: [fn [x y] [hl x ' == ' y]]
t_false: 'false'
t_func: 'func'

t_if: [fn [expr body] [block [hl 'if ' expr] body]]

t_ifelse: [fn [expr if_body e_body]
              [vl [hl 'if ' expr ' {']
                  [ind if_body]
                  [hl '} else {']
                  [ind e_body]
                  [hl '}']]]

t_ifelifelse: [fn [expr if_body elif_cond elif_body e_body]
                  [vl [hl 'if ' expr ' {']
                      [ind if_body]
                      [hl '} else if ' elif_cond ' {']
                      [ind elif_body ]
                      [hl '} else {']
                      [ind e_body]
                      [hl '}']]]

t_istrue: [fn [v] [hl v ' == true']]
t_isfalse: [fn [v] [hl v ' == false']]
t_list_one_any: [fn [x] [hl '[]any{' x '}']]
t_list_zero_any: '[]any{}'
t_meth_def: 'func (p *Parser) '
t_meth_self: ''
t_meth_params: [fn [params] params]
t_newscope: 'make(map[string]any)'  # value for a new scope (dict[str, any])
t_not: '!'  # the logical operator
t_null: 'nil'
t_or: [fn [x y] [hl x ' || ' y]]
t_pop: [fn [x] [hl x ' = ' x '[:len(' x ') - 1]']]
t_return: 'return'

t_regexp: [fn [re_str]
              [vl [hl "r, _ := regexp.Compile("
                      [lit [strcat "(?m:" re_str ')']]
                      ")"]
                  [hl "sub := string(p.text[p.pos : p.end])"]
                  [hl "loc := r.FindStringIndex(sub)"]
                  'if (loc != nil) && (loc[0] == 0) {'
                  [ind [vl 'end := p.pos + loc[1]'
                           [succeed 'string(p.text[p.pos:end])' 'end']
                           'return']]
                  '}'
                  'p.o_fail()']]

t_self: 'p'
t_substr: [fn [s start end]
              [tri 'string('
                   [pack [tri '[]rune(' s ')'] [tri '[' [hl start ':' end] ']']]
                   ')']]

t_throw: [fn [msg] [hl 'panic(' msg ')']]
t_toplevel_extra_sep: null

t_to_str: [fn [v]
              [if [and [is_str v] [equal [substr v 0 1] '"']]
                  v
                  [hl v '.(string)']]]


t_true: 'true'

t_type_str: [fn [td]
              [let [[b  [get td 'base']]
                    [els [get td 'elements']]
                    [b2s [cond [[equal b 'null'] 'null']
                               [[equal b 'any'] 'any']
                               [[equal b 'float'] 'float64']
                               [[equal b 'str'] 'string']
                               [else b]]]]
                [if [is_empty els]
                    b2s
                    [cond [[equal b 'list']
                           [strcat '[]' [t_type_str [item els 0]]]]
                          [[equal b 'dict']
                           [strcat 'map['
                                    [t_type_str [item els 0]]
                                    ']'
                                    [t_type_str [item els 1]]]]
                          [else '??']]]]]

t_while: [fn [expr body] [block [hl 'for ' expr ] body]]

#
# The basic block structure of the file is given in the `generate` template
# in base. This section defines the templates `generate` references.
#

default_header: @"""
    // Generated by pyfloyd version @generator_options.version
    //    https://github.com/dpranke/pyfloyd
    //
    @wrap_argv['//    `' '//     ']
    //

    @if[generator_options.main [vl 'package main' '']]
    @imports[]
    """

main_header: @"""
    @default_header[]
    """

imports: @"""
    import (
        "errors"
        "fmt"
        @if[generator_options.main [vl '"encoding/json"' '"io"' '"os"']]
        @if[[or grammar.re_needed [in grammar.needed_operators 'unicat']]
            '"regexp"']
        @if[grammar.operator_needed '"slices"']
        @if[[or [in grammar.needed_builtin_functions 'atoi']
                [in grammar.needed_builtin_functions 'atof']
                [in grammar.needed_builtin_functions 'atou']
                [in grammar.needed_builtin_functions 'xtoi']
                [in grammar.needed_builtin_functions 'xtou']
                ]
            '"strconv"']
        @if[[or generator_options.main
                [in grammar.needed_builtin_functions 'atoi']
                [in grammar.needed_builtin_functions 'atou']
                [in grammar.needed_builtin_functions 'cat']
                [in grammar.needed_builtin_functions 'join']
                [in grammar.needed_builtin_functions 'scat']
                [in grammar.needed_builtin_functions 'xtoi']
                [in grammar.needed_builtin_functions 'xtou']
                ]
            '"strings"']
    )
    """

parsing_runtime_exception_class: """
    """

operator_state_class: """
    type operatorState struct {
        currentDepth int
        currentPrec int
        precOps map[int][]string
        precs []int
        rassoc map[string]bool
        choices map[string](func ()())
    }
    """

result_class: """
    type cacheEntry struct {
        val any
        failed bool
        pos int
    }

    type Result struct {
        val any
        err error
        pos int
    }
    """

parse_function: """
    func Parse(text string, args ...any) (any, error) {
      var path string = "<string>"
      var start int = 0
      externs := make(map[string]any)

      if len(args) > 0 {
          path = args[0].(string)
      }
      if len(args) > 1 {
          externs = args[1].(map[string]any)
      }
      if len(args) > 2 {
         start = args[2].(int)
      }

      p := NewParser(text, path);

      r := p.Parse(externs, start);
      return r.val, r.err
    }
    """

parser_class: @"""
    type Parser struct {
        text []rune
        path string
        val any
        failed bool
        pos  int
        end  int
        errpos int
        externs map[string]any
        @if[generator_options.memoize 'cache map[int]map[string]cacheEntry']
        @if[grammar.seeds_needed 'seeds map[int]map[string]cacheEntry']
        @if[grammar.leftrec_needed 'blocked map[string]bool']
        @if[grammar.lookup_needed 'scopes []map[string]any']
        @if[grammar.operator_needed 'operators map[string]*operatorState']
    }

    @parser_methods[]

    @fn_aminus

    @fn_aplus

    @fn_getany

    @fn_to_bool
    """

parser_constructor: @"""
    func NewParser(text string, path string) *Parser {
        p := Parser{text: []rune(text), path: path}
        p.end = len(p.text)
        @externs[]
        @if[generator_options.memoize
            'p.cache = make(map[int]map[string]cacheEntry)']
        @if[grammar.seeds_needed
            'p.seeds = make(map[int]map[string]cacheEntry)']
        @if[grammar.leftrec_needed
            'p.blocked = make(map[string]bool)']
        @if[grammar.operator_needed
            [vl 'p.operators = make(map[string]*operatorState)'
                [map_items operator_state grammar.operators]]]
        return &p
    }

    """


externs: [fn []
             [vl [hl 'p.externs = make(map[string]any)']
                 [map_items [fn [k v]
                                [hl 'p.externs['
                                    [lit k]
                                    '] = '
                                    [if [equal v t_func]
                                        [fld [fn_name k]]
                                        [if v t_true t_false]]]]
                            grammar.externs]]]

operator_state: [fn [rule o]
                    [vl 'o := operatorState{}'
                        [operator_prec_ops o]
                        'precs := make([]int, 0, len(o.precOps))'
                        'for k, _ := range o.precOps {'
                        '    precs = append(precs, k)'
                        '}'
                        'slices.Sort(precs)'
                        'slices.Reverse(precs)'
                        'o.precs = precs'
                        [operator_rassoc o]
                        [operator_choices o]
                        [hl 'p.operators[' [lit rule] '] = &o']]]

operator_prec_ops: [fn [o]
                       [vl 'o.precOps = make(map[int][]string)'
                           [map [fn [prec]
                                    [hl 'o.precOps['
                                        [itoa prec]
                                        '] = []string{'
                                        [map [fn [op] [lit op]]
                                             [get o.prec_ops prec]
                                             ', ']
                                        '}']]
                                [sort [keys o.prec_ops]]]]]

operator_rassoc: [fn [o]
                     [vl 'o.rassoc = make(map[string]bool)'
                         [map [fn [op] [hl 'o.rassoc[' [lit op] '] = true']]
                             o.rassoc]]]

operator_choices: [fn [o]
                      [vl 'o.choices = make(map[string](func ()()))'
                          [map_items [fn [op meth]
                                         [hl "o.choices["
                                             [lit op]
                                             "] = p."
                                             meth]]
                                     o.choices]]]

parse_with_exception: @"""
    func (p *Parser) Parse(args ...any) (r Result) {
      var externs map[string]any
      var start int

      if len(args) == 2 {
          externs = args[0].(map[string]any)
          start = args[1].(int)
      } else if len(args) == 1 {
          externs = args[0].(map[string]any)
          start = 0
      }

      errs := ""
      for key, value := range externs {
          if _, ok := p.externs[key] ; !ok {
              errs += "Unexpected extern '" + key + "'\\n"
          } else {
              p.externs[key] = value
          }
      }

      if errs != "" {
          return Result{nil, errors.New(errs), 0}
      }

      defer func() {
        if msg := recover(); msg != nil {
            lineno, _ := p.o_offsets(p.errpos)
            err_msg := fmt.Sprintf("%s:%d %s", p.path, lineno, msg.(string))
            r = Result{nil, errors.New(err_msg), 0}
        }
      }()

      p.pos = start
      p.r_@grammar.starting_rule()

      if p.failed {
          r = Result{nil, errors.New(p.o_error()), p.errpos}
      } else {
          r = Result{p.val, nil, p.pos}
      }
      return
    }
    """  # parse_with_exception

parse_without_exception: @"""
    func (p *Parser) Parse(args ...any) (r Result) {
      var externs map[string]any
      var start int

      if len(args) == 2 {
          externs = args[0].(map[string]any)
          start = args[1].(int)
      } else if len(args) == 1 {
          externs = args[0].(map[string]any)
          start = 0
      }

      errs := ""
      for key, value := range externs {
          if _, ok := p.externs[key] ; !ok {
              errs += "Unexpected extern '" + key + "'\\n"
          } else {
              p.externs[key] = value
          }
      }

      if errs != "" {
          return Result{nil, errors.New(errs), 0}
      }

      p.pos = start
      p.r_@grammar.starting_rule()

      if p.failed {
          r = Result{nil, errors.New(p.o_error()), p.errpos}
      } else {
          r = Result{p.val, nil, p.pos}
      }
      return
    }
    """  # parse_without_exception

default_footer: null

main_footer: """

    func main() {
        externs := make(map[string]any)
        var s string
        var filename string
        var i int = 1
        var err error

        for i < len(os.Args) {
            if os.Args[i] == "-h" || os.Args[i] == "--help" {
                fmt.Println("usage [-h] [-D var=val] [-c str] [file]")
                os.Exit(2)
            } else if os.Args[i] == "-D" || os.Args[i] == "--define" {
                l := strings.SplitN(os.Args[i+1], "=", 2)
                var v any
                err = json.Unmarshal([]byte(l[1]), &v)
                if err != nil {
                    panic(err)
                }
                externs[l[0]] = v
                i += 2
            } else if os.Args[i] == "-c" || os.Args[i] == "--code" {
                s = os.Args[i+1]
                filename = "<code>"
                break
            } else {
                break
            }
        }

        var d []byte

        if s == "" {
            if len(os.Args) == i || os.Args[i] == "-" {
                d, err = io.ReadAll(os.Stdin)
                filename = "<stdin>"
            } else {
                filename = os.Args[i]
                d, err = os.ReadFile(os.Args[i])
            }
            if err != nil {
                panic(err)
            }
            s = string(d)
        }

        val, err := Parse(string(d), filename, externs)
        if err == nil {
            b, _ := json.Marshal(val)
            if err != nil {
                fmt.Fprintln(os.Stderr, "Failed to marshal `%v`", val)
            } else {
                fmt.Fprintln(os.Stdout, string(b))
            }
        } else {
            fmt.Fprintln(os.Stderr, err)
            os.Exit(1)
        }

    }
    """  # main_footer

#
# Language-specific rules for nodes in the AST.
#

n_e_arr: [fn [node]
             [tri '[]any{' [comma [map [fn [c] [expr c]] node.ch]] '}']]

n_e_call_infix: [fn [node]
                    [pack [if [in grammar.externs [get [item node.ch 0] 'v']]
                              [hl '('
                                  [extern [get [item node.ch 0] 'v']]
                                  '.(func(*Parser, ...any)(any)))']
                              [expr [item node.ch 0]]]
                          [hl '('
                                [if [in grammar.externs
                                        [get [item node.ch 0] 'v']]
                                    [comma [cons t_self
                                                 [map [fn [c] [expr c]]
                                                      [slice node.ch 1 0]]]]
                                    [comma [map [fn [c] [expr c]]
                                                [slice node.ch 1 0]]]]
                                ')']]]

n_e_getitem: [fn [node] [tri '.([]any)[' [expr node.child] ']']]

n_e_getitem_infix: [fn [node] [hl [call 'fn_getany'
                                        [list [expr [item node.ch 0]]
                                              [expr [item node.ch 1]]]
                                  ']']]]

n_e_minus: [fn [node]
              [call 'fn_aminus' [list [expr [item node.ch 0]]
                                      [expr [item node.ch 1]]]]]

n_e_not: [fn [node] [hl '!' [call 'fn_to_bool' [list [expr node.child]]]]]

n_e_plus: [fn [node]
              [call 'fn_aplus' [list [expr [item node.ch 0]]
                                     [expr [item node.ch 1]]]]]



n_regexp: [fn [node] [t_regexp node.v]]

n_set: [fn [node] [t_regexp [strcat '[' node.v ']']]]

#
# Built-in operators and rules
#

r_any: [meth q[]
             """
             if p.pos < p.end {
                 p.o_succeed(string(p.text[p.pos]), p.pos + 1)
             } else {
                 p.o_fail()
             }
             """]

r_end: [meth q[]
             """
             if p.pos == p.end {
                 p.o_succeed(nil, p.pos)
             } else {
                 p.o_fail()
             }
             """]

o_ch: [meth q['c string']
            """
            pos := p.pos
            if pos < p.end && p.text[pos] == ([]rune(c)[0]) {
                p.o_succeed(c, p.pos + 1)
            } else {
                p.o_fail()
            }
            """]

o_offsets: """
           func (p *Parser) o_offsets(pos int) (int, int) {
               lineno := 1
               colno := 1
               for i := 0 ; i < pos ; i++ {
                   if p.text[i] == '\\n' {
                       lineno += 1
                       colno = 1
                   } else {
                       colno += 1
                   }
               }
               return lineno, colno
           }
           """

o_error: """
         func (p *Parser) o_error() string {
             lineno, colno := p.o_offsets(p.errpos)
             var thing string
             if p.errpos == p.end {
                 thing = "end of input"
             } else {
                 thing = fmt.Sprintf("%q", string(p.text[p.errpos]))
             }
             return fmt.Sprintf("%s:%d Unexpected %s at column %d",
                                p.path, lineno, thing, colno)
         }
         """

o_fail: [meth q[]
              """
              p.val = nil
              p.failed = true
              p.errpos = max(p.errpos, p.pos)
              """]

o_leftrec: [meth q['rule any' 'rule_name string' 'left_assoc bool']
                 """
                 pos := p.pos
                 var entry cacheEntry
                 var ok bool

                 if _, ok = p.seeds[pos]; !ok {
                    p.seeds[pos] = make(map[string]cacheEntry)
                 }
                 c := p.seeds[pos]
                 if entry, ok = c[rule_name]; ok {
                     p.val = entry.val
                     p.failed = entry.failed
                     p.pos = entry.pos
                     return
                 }
                 if _, ok = p.blocked[rule_name]; ok {
                     p.val = nil
                     p.failed = true
                     return
                 }
                 entry = cacheEntry{nil, true, p.pos}
                 p.seeds[pos][rule_name] = entry
                 if left_assoc {
                     p.blocked[rule_name] = true
                 }
                 for true {
                     f := rule.(func ()())
                     f()
                     if p.pos > entry.pos {
                         entry = cacheEntry{p.val, p.failed, p.pos}
                         c[rule_name] = entry
                         p.pos = pos
                     } else {
                         delete(c, rule_name)
                         p.val = entry.val
                         p.failed = entry.failed
                         p.pos = entry.pos
                         if left_assoc {
                             delete(p.blocked, rule_name)
                         }
                         return
                     }
                 }
                 """]  # o_leftrec

o_lookup: """
          func (p *Parser) o_lookup(v string) any {
              var val any
              var ok bool
              l := len(p.scopes) - 1
              for l >= 0 {
                if val, ok = p.scopes[l][v] ; ok {
                  return val
                }
                l -= 1
              }
              if val, ok = p.externs[v]; ok {
                return val
              }
              panic("Unknown var '" + v + "'")
          }
          """

o_memoize: [meth q['rule_name string' 'fn any']
                 """
                 pos := p.pos
                 if _, ok := p.cache[pos]; !ok {
                    p.cache[pos] = make(map[string]cacheEntry)
                 }
                 c := p.cache[pos]
                 if _, ok := c[rule_name]; ok {
                   r := c[rule_name]
                   p.val = r.val
                   p.failed = r.failed
                   p.pos = r.pos
                   return
                 }
                 f := fn.(func ()())
                 f()
                 c[rule_name] = cacheEntry{p.val, p.failed, p.pos}
                 """]

o_operator: [meth q['rule_name string']
                  """
                  var entry cacheEntry
                  var cache map[string]cacheEntry
                  var ok bool

                  o := p.operators[rule_name]
                  pos := p.pos
                  if _, ok = p.seeds[pos]; !ok {
                      p.seeds[pos] = make(map[string]cacheEntry)
                  }
                  cache = p.seeds[pos]
                  if entry, ok = cache[rule_name]; ok {
                      p.val = entry.val
                      p.failed = entry.failed
                      p.pos = entry.pos
                      return
                  }
                  o.currentDepth += 1
                  entry = cacheEntry{nil, true, p.pos}
                  cache[rule_name] = entry
                  minPrec := o.currentPrec
                  for i := 0; i < len(o.precs) ; {
                      repeat := false
                      prec := o.precs[i]
                      precOps := o.precOps[prec]
                      if prec < minPrec {
                          break
                      }
                      o.currentPrec = prec
                      if _, ok = o.rassoc[precOps[0]]; !ok {
                          o.currentPrec += 1
                      }
                      for j := 0; j < len(precOps) ; j += 1 {
                          op := precOps[j]
                          o.choices[op]()
                          if !p.failed && p.pos > pos {
                              entry = cacheEntry{p.val, p.failed, p.pos}
                              cache[rule_name] = entry
                              repeat = true
                              break
                          }
                          p.o_rewind(pos)
                      }
                      if !repeat {
                          i += 1
                      }
                  }
                  delete(cache, rule_name)
                  o.currentDepth -= 1
                  if o.currentDepth == 0 {
                    o.currentPrec = 0
                  }
                  p.val = entry.val
                  p.failed = entry.failed
                  p.pos = entry.pos
                  """]  # o_operator

o_range: [meth q['i string' 'j string']
               """
               pos := p.pos
               if pos == p.end {
                 p.o_fail()
                 return
               }
               c := p.text[pos]
               if []rune(i)[0] <= c && c <= []rune(j)[0] {
                 p.o_succeed(string(c), p.pos + 1)
               } else {
                 p.o_fail()
               }
               """]

o_rewind: [meth q['newpos int'] 'p.o_succeed(nil, newpos)']

o_str: [meth q['s string']
             """
             for _, r := range s {
               p.o_ch(string(r))
               if p.failed {
                 return
               }
             }
             p.val = s
             """]

o_succeed: [meth q['v any' 'newpos int'] """
   p.val = v
   p.failed = false
   p.pos = newpos
   """]

o_unicat: [meth q['cat string']
                """
                r, _ := regexp.Compile("(?m:\\\\p{" + cat + "})")
                sub := string(p.text[p.pos:])
                loc := r.FindStringIndex(sub)
                if (loc != nil) && (loc[0] == 0) {
                    end := p.pos + loc[1]
                    p.o_succeed(p.text[p.pos:end], end)
                    return
                }
                p.o_fail()
                """]

fn_aminus: [def_method _t_name
                      q['l any' 'r any']
                      ' any'
                      """
                      l_type := fmt.Sprintf("%T", l)
                      r_type := fmt.Sprintf("%T", r)
                      if l_type == "int" && r_type == "int" {
                          return l.(int) - r.(int)
                      } else if l_type == "int" && r_type == "float64" {
                          return float64(l.(int)) - r.(float64)
                      } else if l_type == "float64" && r_type == "int" {
                          return l.(float64) - float64(r.(int))
                      } else {
                          return l.(float64) - r.(float64)
                      }
                      """]

fn_getany: [def_method _t_name
                      q['v any' 'i int']
                      ' any'
                      'return v.([]any)[i]']

fn_aplus: [def_method _t_name
                      q['l any' 'r any']
                      ' any'
                      """
                      l_type := fmt.Sprintf("%T", l)
                      r_type := fmt.Sprintf("%T", r)
                      if l_type != r_type {
                          panic(fmt.Sprintf("Different types for `+`: %s, %s",
                                            l_type, r_type))
                      }
                      if l_type == "string" {
                          return l.(string) + r.(string)
                      } else if l_type == "int" {
                          return l.(int) + r.(int)
                      } else if l_type == "float64" {
                          return l.(float64) + r.(float64)
                      } else {
                          panic(fmt.Sprintf("Unsupported type for `+`: %s",
                                            l_type))
                     }
                     """]

fn_atof: [def_method _t_name
                     q['a any']
                     ' float64'
                     """
                     r, _ := strconv.ParseFloat(a.(string), 64)
                     return r
                     """]

fn_atoi: [def_method _t_name
                     q['a any' 'base int']
                     ' int'
                     """
                     s := a.(string)
                     if ((base == 16 && strings.HasPrefix(s, "0x")) ||
                         (base == 8 && strings.HasPrefix(s, "0o")) ||
                         (base == 2 && strings.HasPrefix(s, "0b"))) {
                        s = s[2:]
                    }
                     r, _ := strconv.ParseInt(s, base, 64)
                     return int(r)
                     """]

fn_atou: [def_method _t_name
                     q['a any' 'base int']
                     ' string'
                     """
                     s := a.(string)
                     if ((base == 16 && strings.HasPrefix(s, "0x")) ||
                         (base == 8 && strings.HasPrefix(s, "0o")) ||
                         (base == 2 && strings.HasPrefix(s, "0b"))) {
                        s = s[2:]
                    }
                     r, _ := strconv.ParseInt(s, base, 64)
                     return string(rune(r))
                     """]

fn_cat: [def_method _t_name
                    q['ss any']
                    ' string',
                    """
                    slis, ok := ss.([]string)
                    if ok {
                        return strings.Join(slis, "")
                    }

                    lis := make([]string, 0)
                    for _, s := range ss.([]any) {
                        lis = append(lis, s.(string))
                    }
                    return strings.Join(lis, "")
                    """]

fn_colno: [def_method _t_name
                      q[]
                      " int"
                      """
                      colno := 0
                      if p.pos == p.end {
                          colno += 1
                      }
                      for (p.pos >= colno) && (p.text[p.pos - colno] != '\\n') {
                          colno += 1
                      }
                      return colno
                      """]

fn_concat: [def_method _t_name
                       q['xs any' 'ys any']
                       ' []any'
                       'return append(xs.([]any), ys.([]any)...)']

fn_cons: [def_method _t_name
                     q['hd any' 'tl any']
                     ' []any'
                     'return append([]any{hd}, tl.([]any)...)']

fn_dedent: [def_method _t_name
                       q['s string', 'colno int' 'min_indent int']
                       'string'
                       'return s']

fn_dict: [def_method _t_name
                      q['pairs any']
                      ' map[string]any'
                      """
                      m := make(map[string]any)
                      for _, v := range pairs.([]any) {
                           l := v.([]any)
                           m[l[0].(string)] = l[1]
                      }
                      return m
                      """]

fn_in: [def_method _t_name
                    q['lis []any' 'v any']
                    ' bool'
                    """
                    for _, el := range lis {
                        if el == v {
                            return true
                        }
                    }
                    return false
                    """]

fn_itou: [def_method _t_name
                     q['n int']
                     ' string'
                     'return string(rune(n))']

fn_join: [def_method _t_name
                     q['sep any' 'vs any']
                     'string'
                     """
                     strs := make([]string, len(vs.([]any)))
                     for i, v := range(vs.([]any)) {
                         strs[i] = v.(string)
                     }
                     return strings.Join(strs, sep.(string))
                     """]

fn_list: [def_method _t_name
                    q['args ...any']
                    ' []any'
                    """
                    if len(args) == 0 {
                        return []any{}
                    } else {
                        return args
                    }
                    """]

fn_node: [def_method _t_name
                     q['parser *Parser' 'args ...any']
                     ' any'
                     """
                     return args
                     """]

fn_scat: [def_method _t_name
                     q['hd any' 'tl any']
                     ' string'
                     """
                      lis := make([]string, 0)
                      lis = append(lis, hd.(string))
                      for _, t := range tl.([]any) {
                          lis = append(lis, t.(string))
                      }
                     return strings.Join("", lis)
                     """]

fn_scons: [def_method _t_name
                      q['hd any' 'tl any']
                      ' []string'
                      """
                      strs := make([]string, 0)
                      strs = append(strs, hd.(string))
                      if vals, ok := tl.([]string); ok {
                          strs = append(strs, vals...)
                      } else {
                          for _, v := range tl.([]any) {
                              strs = append(strs, v.(string))
                          }
                      }
                      return strs
                      """]

fn_strcat: [def_method _t_name
                       q['a any' 'b any']  # TODO: handle > 2 strings.
                       ' string'
                       'return a.(string) + b.(string)']

fn_to_bool: [def_method _t_name
                        q['b any']
                        ' bool'
                        'return b.(bool)']


# TODO: Could theoretically use `runenames.Lookup()` from
# `go pkg golang.org/x/text/unicode/runenames` to implement this.
fn_ulookup: [def_method _t_name
                        q['s any']
                        ' string'
                        'panic("Unsupported function `ulookup()`")']

fn_utoi: [def_method _t_name
                     q['u any']
                     ' int64'
                     'return int64(([]rune(u.(string)))[0])']

fn_xtoi: [def_method _t_name
                     q['x any']
                     ' int64'
                     """
                     s := x.(string)
                     if (strings.HasPrefix(s, "0x")) {
                         s = s[2:]
                     }
                     r, _ := strconv.ParseInt(s, 16, 64)
                     return r
                     """]

fn_xtou: [def_method _t_name
                     q['x any']
                     ' string'
                     """
                     s := x.(string)
                     if (strings.HasPrefix(s, "0x")) {
                         s = s[2:]
                     }
                     r, _ := strconv.ParseInt(s, 16, 64)
                     return string(rune(r))
                     """]

}
