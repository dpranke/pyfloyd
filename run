#!/usr/bin/env python3
# Copyright 2025 Dirk Pranke. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""A simple top-level script for managing Python repositories."""

import argparse
import glob
import os
import re
import shlex
import shutil
import subprocess
import sys
import types
from typing import Optional

tomllib: Optional[types.ModuleType] = None

try:
    import tomllib  # type: ignore
except ModuleNotFoundError:
    pass

#
# The `grammars` and `templates globals are the only things in this file
# that should need to be changed from project to project.
#

# An optional dict of grammars used in the package (grammar -> parser).
grammars: dict[str, str] = {
    'grammars/floyd.g': 'src/pyfloyd/grammar_parser.py',
    'grammars/datafile.g': 'src/pyfloyd/datafile/parser.py',
    'grammars/at_exp.g': 'src/pyfloyd/at_exp_parser.py',
    'grammars/lisp.g': 'src/pyfloyd/lisp_parser.py',
}

templates: dict[str, list] = {
    'docs/functions.md': [
        '-t',
        '-T',
        'docs/functions.md.dft',
        'src/pyfloyd/functions.df',
    ],
    'src/pyfloyd/functions.py': [
        '-t',
        '-T',
        'src/pyfloyd/functions.py.dft',
        'src/pyfloyd/functions.df',
    ],
}

#
# Everything below this line should be unchanged from project to project.
#


def _pyproject_value(val):
    fields = val.split('.')
    if tomllib:
        with open('pyproject.toml', mode='rb') as fp:
            v = tomllib.load(fp)[fields[0]]
            for field in fields[1:]:
                if field in v:
                    v = v[field]
                else:
                    return None
            return v
    else:
        with open('pyproject.toml', mode='rb') as fp:
            section = '.'.join(fields[:-1])
            key = fields[-1]
            lines = fp.read().decode('utf8').splitlines()
            found_section = False
            for line in lines:
                if found_section:
                    # m = re.match(rf'{key} = "([^"]*)"', line)
                    m = re.match(rf'{key} = (.*)', line)
                    if m:
                        return eval(m.group(1))  # pylint: disable=eval-used
                else:
                    if line == f'[{section}]':
                        found_section = True
    return None


package = _pyproject_value('project.name')

assert package is not None, 'Could not determine package name'


class Runner:
    def __init__(self):
        if os.path.exists(os.path.join('src', package + '.py')):
            self.single_file = True
            self.top = None
        elif os.path.isdir(os.path.join('src', package)):
            self.single_file = False
            self.top = 'src' + os.path.sep + package

        self.grammars = grammars

        self.arg_parser = None
        self.args = None
        self.remaining_args = None
        self.file = None
        self.run_cmd = None
        self.subps = None
        self.uv_path = None

    def add_parser(self, cmd, help):  # pylint: disable=redefined-builtin
        method = getattr(self, 'run_' + cmd.replace('-', '_'))
        subp = self.subps.add_parser(cmd, help=help)
        subp.add_argument('-E', '--echo-real-command', action='store_true')
        subp.add_argument(
            '-n',
            '--no-execute',
            action='store_true',
            help="Don't do anything that causes effects.",
        )
        subp.add_argument(
            '-q',
            '--quiet',
            action='store_true',
            help='Suppress output unless something fails.',
        )
        subp.add_argument(
            '-v',
            '--verbose',
            action='count',
            default=0,
            help=(
                'Echo commands as they are run (may be specified multiple '
                'times; if specified N times, N-1 "-v"s will be passed to '
                'the command if supported'
            ),
        )
        subp.add_argument(
            '-t',
            '--typ',
            action=argparse.BooleanOptionalAction,
            default=True,
            help='Install local typ package as well',
        )
        subp.set_defaults(func=lambda _: method())
        return subp

    def call(self, cmd, comment='', echo_cmd=None, **kwargs):
        if not self.args.echo_real_command and echo_cmd:
            cmdstr = f'{shlex.join(echo_cmd)}{comment}'
        else:
            cmdstr = f'{shlex.join(cmd)}{comment}'
        if self.args.no_execute or self.args.verbose:
            print(cmdstr)
        if self.args.no_execute:
            return None
        capture_output = kwargs.get('capture_output', self.args.quiet)
        if 'capture_output' in kwargs:
            del kwargs['capture_output']

        proc = subprocess.run(
            cmd, capture_output=capture_output, check=False, **kwargs
        )
        if proc.returncode != 0:
            if not self.args.no_execute and not self.args.verbose:
                print(f'Command failed: `{cmdstr}`')
            if self.args.quiet:
                print(proc.stdout)
                print(proc.stderr, file=sys.stderr)
            sys.exit(proc.returncode)
        return proc

    def main(self, argv):  # pylint: disable=too-many-statements
        self.arg_parser = argparse.ArgumentParser(prog='run')
        self.subps = self.arg_parser.add_subparsers(required=True)

        self.add_parser('build', help='Build the package.')
        self.add_parser('check', help='Check the source code with ruff.')
        self.add_parser('checks', help='Same as `run check`.')
        self.add_parser('clean', help='Remove any local files.')

        subp = self.add_parser(
            'coverage', help='Run tests and report code coverage.'
        )
        subp.add_argument(
            '-b',
            '--branch',
            action='store_true',
            help='Report branch coverage.',
        )
        subp.add_argument(
            '-m',
            '--show-missing',
            action='store_true',
            help='Show uncovered lines.',
        )
        subp.add_argument(
            '--omit',
            help='Omit files whose paths match one of these patterns.',
        )
        subp.add_argument(
            '-u', '--unit', action='store_true', help='Only run unit tests.'
        )

        subp = self.add_parser(
            'devenv',
            help='Set up a dev venv at //.venv with all the needed packages.',
        )

        subp = self.add_parser(
            'format', help='Format the source code with ruff.'
        )
        subp.add_argument(
            '--check',
            action='store_true',
            help='Just check to see if any files would be modified.',
        )

        subp = self.add_parser('help', help='Get help on a subcommand.')
        subp.add_argument(
            nargs='?',
            action='store',
            dest='subcommand',
            help='The command to get help for.',
        )

        self.add_parser('lint', help='Lint the source code with pylint.')

        self.add_parser('mypy', help='Typecheck the code with mypy.')

        subp = self.add_parser(
            'presubmit',
            help='Run all the steps that should be run prior to commiting.',
        )
        subp.add_argument(
            '-b',
            '--branch',
            action='store_true',
            help='Report branch coverage.',
        )
        subp.add_argument(
            '-f',
            '--failfast',
            action='store_true',
            help='Stop on first fail or error',
        )
        subp.add_argument(
            '-m',
            '--show-missing',
            action='store_true',
            help='Show uncovered lines.',
        )
        subp.add_argument(
            '--omit',
            help='Omit files whose paths match one of these patterns.',
        )
        subp.add_argument(
            '-u', '--unit', action='store_true', help='Only run unit tests.'
        )

        subp = self.add_parser('publish', help='Publish packages to PyPI.')
        subp.add_argument(
            '--test',
            action='store_true',
            help='Upload to the PyPI test instance.',
        )
        subp.add_argument(
            '--prod',
            action='store_true',
            help='Upload to the real PyPI instance.',
        )

        if self.grammars:
            subp = self.add_parser('regen', help='Regenerate parsers.')
            subp.add_argument(
                '--check',
                action='store_true',
                help='Just check to see if any files would be modified.',
            )

        subp = self.add_parser('tests', help='Run the tests.')
        subp.add_argument(
            '-f',
            '--failfast',
            action='store_true',
            help='Stop on first fail or error',
        )
        subp.add_argument(
            '-u', '--unit', action='store_true', help='Only run unit tests.'
        )

        self.args, self.remaining_args = self.arg_parser.parse_known_args(
            self._shuffle_argv(argv)
        )
        if self.remaining_args and self.remaining_args[0] == '--':
            self.remaining_args = self.remaining_args[1:]

        self.uv_path = shutil.which('uv')
        if self.uv_path is None:
            print('You need to have `uv` installed to run this script.')
            sys.exit(2)

        if 'VIRTUAL_ENV' in os.environ:
            self.run_cmd = ['python3']
        elif self.args.quiet:
            self.run_cmd = [self.uv_path, 'run', '--quiet', 'python3']
        else:
            self.run_cmd = [self.uv_path, 'run', 'python3']

        self.args.func(self.args)

    def run_build(self):
        cmd = [self.uv_path, 'build']
        if self.args.quiet:
            cmd.append('--quiet')
        self.call(cmd)

    def run_check(self):
        self.call(
            self.run_cmd + ['-m', 'ruff', 'check'],
            comment='  # uses files from [tool.ruff].include',
        )

    def run_checks(self):
        self.run_check()

    def run_clean(self):
        path = shutil.which('git')
        if path is None:
            print('You must have git installed to clean out the right files.')
            sys.exit(1)

        self.call([path, 'clean', '-fd'])

    def run_coverage(self):
        env = os.environ.copy()
        if self.args.unit:
            env['TYP_SKIP'] = 'integration'
            self.args.omit = '*_test.py'
        if self.args.typ:
            cmd = self.run_cmd + ['-m', 'typ', '-TW', '-c']
            if self.args.show_missing:
                cmd.append('--coverage-show-missing')
        else:
            cmd = self.run_cmd + ['-m', 'coverage', 'run']
            if self.args.branch:
                cmd.append('--branch')
            cmd.extend(
                [
                    '-m',
                    'unittest',
                    'discover',
                    '-t',
                    '.',
                    '-s',
                    'tests',
                    '-p',
                    '*_test.py',
                ],
            )
        if self.args.verbose > 1:
            cmd.append('-' + 'v' * (self.args.verbose - 1))
        cmd.extend(self.remaining_args)
        self.call(cmd, env=env)
        if not self.args.typ:
            cmd = self.run_cmd + ['-m', 'coverage', 'report', '--show-missing']
            if self.args.omit:
                cmd.append(f'--omit={self.args.omit}')
            self.call(cmd)

    def run_devenv(self):
        if self.uv_path is None:
            print('You need to have `uv` installed to set up a dev env.')
            sys.exit(2)

        cmd = [self.uv_path, 'sync']
        if self.args.quiet:
            cmd.append('--quiet')

        in_venv = 'VIRTUAL_ENV' in os.environ
        self.call(cmd)
        if not in_venv:
            print('Run `source .venv/bin/activate` to finish devenv setup.')

    def run_format(self):
        cmd = self.run_cmd + ['-m', 'ruff', 'format']
        if self.args.check:
            cmd.append('--check')
        if self.args.verbose > 1:
            cmd.append('--verbose')
        cmd.extend(self.remaining_args)
        self.call(cmd, comment='  # uses files from [tool.ruff].include ')

    def run_help(self):
        if self.args.subcommand:
            self.main([self.args.subcommand, '--help'])
        self.main(['--help'])

    def run_lint(self):
        cmd_pfx = self.run_cmd + ['-m', 'pylint']
        if self.remaining_args:
            self.call(cmd_pfx + self.remaining_args)
        else:
            self.call(
                cmd_pfx + self._files()[1:],
                echo_cmd=cmd_pfx,
                comment='  # + files from [tool.ruff].include',
            )

    def run_mypy(self):
        cmd_pfx = self.run_cmd + ['-m', 'mypy']
        if self.remaining_args:
            self.call(cmd_pfx + self.remaining_args)
        else:
            self.call(
                cmd_pfx + self._files()[1:],
                echo_cmd=cmd_pfx,
                comment='  # + files from [tool.ruff].include',
            )

    def run_presubmit(self):
        self.args.check = True
        v = sys.version_info
        print(f'# Using Python version {v.major}.{v.minor}.{v.micro}')
        print('# //run regen --check')
        self.run_regen()
        print('# //run format --check')
        self.run_format()
        print('# //run check')
        self.run_check()
        print('# //run lint')
        self.run_lint()
        print('# //run mypy')
        self.run_mypy()
        print('# //run coverage')
        self.run_coverage()
        print('')
        print('# Presubmit completed successfully.')

    def run_publish(self):
        if not self.args.test and not self.args.prod:
            print('You must specify either --test or --prod to upload.')
            sys.exit(2)

        version = self._get_version()
        sep = os.path.sep
        tgz = f'dist{sep}{package}-{version}.tar.gz'
        wheel = f'dist{sep}{package}-{version}-py3-none-any.whl'
        if not os.path.exists(tgz) or not os.path.exists(wheel):
            print('Run `//run build` first')
            return
        if self.args.test:
            test = ['--publish-url', 'https://test.pypi.org/legacy/']
        else:
            test = []
        self.call([self.uv_path, 'publish'] + test + [tgz, wheel])

    def run_regen(self):
        for grammar, parser_file in self.grammars.items():
            new_file = f'{parser_file}.new'
            if os.path.exists(parser_file):
                with open(parser_file, encoding='utf-8') as fp:
                    old = fp.read()
            else:
                old = ''
            self._gen_parser(grammar, parser_file)
            if self.args.no_execute:
                if self.args.check:
                    print(f'diff -q {parser_file} {new_file}')
                else:
                    print(f'mv {new_file} {parser_file}')
                continue

            with open(new_file, encoding='utf-8') as fp:
                new = fp.read()
            if self.args.check:
                os.remove(new_file)
                if old != new:
                    print(
                        f'Need to regenerate {parser_file} with `run regen`.'
                    )
                    sys.exit(1)
                print(f'{parser_file} is up to date.')
            elif old == new:
                print(f'{parser_file} is up to date.')
                os.remove(new_file)
            else:
                os.rename(new_file, parser_file)
                print(f'{parser_file} regenerated.')

        for output, template_cmd in templates.items():
            new_file = f'{output}.new'
            if os.path.exists(output):
                with open(output, encoding='utf-8') as fp:
                    old = fp.read()
            else:
                old = ''

            self._gen_output(output, template_cmd)

            if self.args.no_execute:
                if self.args.check:
                    print(f'diff -q {output} {new_file}')
                else:
                    print(f'mv {new_file} {output}')
                continue

            with open(new_file, encoding='utf-8') as fp:
                new = fp.read()
            if self.args.check:
                os.remove(new_file)
                if old != new:
                    print(f'Need to regenerate {output} with `run regen`.')
                    sys.exit(1)
                print(f'{output} is up to date.')
            elif old == new:
                print(f'{output} is up to date.')
                os.remove(new_file)
            else:
                os.rename(new_file, output)
                print(f'{output} regenerated.')

    def run_tests(self):
        if self.args.typ:
            cmd = self.run_cmd + ['-m', 'typ', '-TW']
            if self.args.failfast:
                cmd.append('-F')
        else:
            cmd = self.run_cmd + [
                '-m',
                'unittest',
                'discover',
                '-t',
                '.',
                '-s',
                'tests',
                '-p',
                '*_test.py',
            ]
            if self.args.failfast:
                cmd.append('-f')

        if self.args.quiet:
            cmd.append('-q')
        if self.args.verbose > 1:
            cmd.append('-' + 'v' * (self.args.verbose - 1))
        cmd.extend(self.remaining_args)
        env = os.environ.copy()
        if self.args.unit:
            env['TYP_SKIP'] = 'integration'
        self.call(cmd, env=env)

    def set_func(self, subp, method):
        subp.set_defaults(func=lambda _: method())

    def _shuffle_argv(self, argv):
        # Take any flags that appear before the subcommand and append
        # them after the subcommand but before any flags following the
        # subcommand.
        leading_args = []
        argc = len(argv)
        i = 0
        while i < argc:
            if argv[i][0] != '-':
                break
            leading_args.append(argv[i])
            i += 1

        return argv[i : i + 1] + leading_args + argv[i + 1 :]

    def _gen_parser(self, grammar, parser_file):
        new_file = f'{parser_file}.new'
        self.call(['flc', '-o', new_file, grammar])
        # TODO: Add a command line arg to set the name of the parser file.
        if not self.args.no_execute:
            with open(new_file, encoding='utf8') as fp:
                orig = fp.read()
            new = orig.replace(new_file, parser_file)
            if new != orig:
                with open(new_file, 'w', encoding='utf8') as fp:
                    fp.write(new)

    def _gen_output(self, output, cmd):
        new_file = f'{output}.new'
        self.call(['flt', '-o', new_file] + cmd)
        # TODO: Add a command line arg to set the name of the parser file.
        if not self.args.no_execute:
            with open(new_file, encoding='utf8') as fp:
                orig = fp.read()
            new = orig.replace(new_file, output)
            if new != orig:
                with open(new_file, 'w', encoding='utf8') as fp:
                    fp.write(new)

    def _files(self):
        dirs = _pyproject_value('tool.ruff.include')
        extra_dirs = _pyproject_value('tool.ruff.extra_include')
        if extra_dirs:
            dirs.extend(extra_dirs)
        files = []
        for d in dirs:
            files.extend(glob.glob(d, recursive=True))
        return files

    def _get_version(self):
        proc = self.call(
            self.run_cmd + ['-m', 'pyfloyd', '-V'], capture_output=True
        )
        version = proc.stdout.decode('utf8').strip()
        m = re.match(r'\d+\.\d+\.\d+(\.dev\d+)?', version)
        if not m:
            print(f'Unexpected version format: "{version}"')
            sys.exit(1)
        return version


if __name__ == '__main__':
    sys.exit(Runner().main(sys.argv[1:]))
